
c:/Users/Nerdom/Desktop/watchdog/target/watchdog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e68  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00015f14  2**0
                  CONTENTS
  3 .data         00000068  2003e358  000d5e80  0000e358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000430  2003e3c0  2003e3c0  0001e3c0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d5ee8  000d5ee8  00015ee8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d5f10  000d5f10  00015f10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000c4cd3  00000000  00000000  00015f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fb05  00000000  00000000  000dabe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000170fb  00000000  00000000  000ea6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002140  00000000  00000000  001017e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003b30  00000000  00000000  00103927  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00034f10  00000000  00000000  00107457  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025ed0  00000000  00000000  0013c367  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001018ea  00000000  00000000  00162237  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bc70  00000000  00000000  00263b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	3c 5b 0d 00                                         <[..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd41 	bl	d5ab4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd46 	bl	d5aca <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e358 	.word	0x2003e358
   d4048:	000d5e80 	.word	0x000d5e80
   d404c:	2003e3c0 	.word	0x2003e3c0
   d4050:	2003e3c0 	.word	0x2003e3c0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fbf3 	bl	d4844 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5e7c 	.word	0x000d5e7c
   d4080:	000d5e3c 	.word	0x000d5e3c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b814 	b.w	d40b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f83f 	bl	d410c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bba5 	b.w	d47e0 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 ba5d 	b.w	d4554 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 ba5b 	b.w	d4554 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:

SYSTEM_MODE(MANUAL);

WatchDog wd;

void setup() {
   d40b0:	b513      	push	{r0, r1, r4, lr}
    pinMode(D7, INPUT);
   d40b2:	2100      	movs	r1, #0
   d40b4:	2007      	movs	r0, #7
   d40b6:	f000 ff4f 	bl	d4f58 <pinMode>
    RGB.control(true);
   d40ba:	2001      	movs	r0, #1
   d40bc:	f000 fb40 	bl	d4740 <_ZN8RGBClass7controlEb>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d40c0:	a802      	add	r0, sp, #8
   d40c2:	2400      	movs	r4, #0
   d40c4:	f840 4d04 	str.w	r4, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d40c8:	4622      	mov	r2, r4
   d40ca:	4621      	mov	r1, r4
   d40cc:	f000 f8b6 	bl	d423c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d40d0:	9b01      	ldr	r3, [sp, #4]
    if  (System.resetReason() == RESET_REASON_WATCHDOG) {
   d40d2:	2b3c      	cmp	r3, #60	; 0x3c
   d40d4:	d109      	bne.n	d40ea <setup+0x3a>
        RGB.color(255,0,0);
   d40d6:	4622      	mov	r2, r4
   d40d8:	4621      	mov	r1, r4
   d40da:	20ff      	movs	r0, #255	; 0xff
   d40dc:	f000 fb40 	bl	d4760 <_ZN8RGBClass5colorEiii>
        delay(CONCURRENT_WAIT_FOREVER);
   d40e0:	f04f 30ff 	mov.w	r0, #4294967295
   d40e4:	f000 fb1a 	bl	d471c <delay>
   d40e8:	e004      	b.n	d40f4 <setup+0x44>
    }  else {
        RGB.color(0,0,255);
   d40ea:	22ff      	movs	r2, #255	; 0xff
   d40ec:	4621      	mov	r1, r4
   d40ee:	4620      	mov	r0, r4
   d40f0:	f000 fb36 	bl	d4760 <_ZN8RGBClass5colorEiii>
    }
    wd.initialize(5000);
   d40f4:	f241 3188 	movw	r1, #5000	; 0x1388
   d40f8:	4803      	ldr	r0, [pc, #12]	; (d4108 <setup+0x58>)
   d40fa:	f000 f829 	bl	d4150 <_ZN8WatchDog10initializeEm>
    wd.pet();
   d40fe:	4802      	ldr	r0, [pc, #8]	; (d4108 <setup+0x58>)
   d4100:	f000 f842 	bl	d4188 <_ZN8WatchDog3petEv>
}
   d4104:	b002      	add	sp, #8
   d4106:	bd10      	pop	{r4, pc}
   d4108:	2003e3c4 	.word	0x2003e3c4

000d410c <loop>:

void loop() {
   d410c:	b508      	push	{r3, lr}
    if (digitalRead(D7) == LOW) {
   d410e:	2007      	movs	r0, #7
   d4110:	f000 ff33 	bl	d4f7a <digitalRead>
   d4114:	b920      	cbnz	r0, d4120 <loop+0x14>
        wd.pet();
   d4116:	4803      	ldr	r0, [pc, #12]	; (d4124 <loop+0x18>)
    }
   d4118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    wd.pet();
}

void loop() {
    if (digitalRead(D7) == LOW) {
        wd.pet();
   d411c:	f000 b834 	b.w	d4188 <_ZN8WatchDog3petEv>
   d4120:	bd08      	pop	{r3, pc}
   d4122:	bf00      	nop
   d4124:	2003e3c4 	.word	0x2003e3c4

000d4128 <_GLOBAL__sub_I_SystemMode>:
    }
   d4128:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d412a:	f000 f847 	bl	d41bc <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d412e:	4b06      	ldr	r3, [pc, #24]	; (d4148 <_GLOBAL__sub_I_SystemMode+0x20>)
   d4130:	2200      	movs	r2, #0
   d4132:	701a      	strb	r2, [r3, #0]
   d4134:	805a      	strh	r2, [r3, #2]
   d4136:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d413a:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d413c:	2003      	movs	r0, #3
   d413e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4142:	f000 b983 	b.w	d444c <set_system_mode>
   d4146:	bf00      	nop
   d4148:	2003e3c6 	.word	0x2003e3c6
   d414c:	00000000 	.word	0x00000000

000d4150 <_ZN8WatchDog10initializeEm>:
#include "WatchDog_WCL.h"

void WatchDog::initialize(uint32_t timeInMilliseconds) {
    *(uint32_t *) WDT_RREN_REG = 0x00000001;
   d4150:	4b0b      	ldr	r3, [pc, #44]	; (d4180 <_ZN8WatchDog10initializeEm+0x30>)
#include "WatchDog_WCL.h"

void WatchDog::initialize(uint32_t timeInMilliseconds) {
   d4152:	b510      	push	{r4, lr}
    *(uint32_t *) WDT_RREN_REG = 0x00000001;
   d4154:	2401      	movs	r4, #1
   d4156:	601c      	str	r4, [r3, #0]
    *(uint32_t *) WDT_CRV_REG = (uint32_t) (timeInMilliseconds * 32.768);
   d4158:	4608      	mov	r0, r1
   d415a:	f001 f9f5 	bl	d5548 <__aeabi_ui2d>
   d415e:	a306      	add	r3, pc, #24	; (adr r3, d4178 <_ZN8WatchDog10initializeEm+0x28>)
   d4160:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4164:	f001 fa66 	bl	d5634 <__aeabi_dmul>
   d4168:	f001 fc76 	bl	d5a58 <__aeabi_d2uiz>
   d416c:	4b05      	ldr	r3, [pc, #20]	; (d4184 <_ZN8WatchDog10initializeEm+0x34>)
   d416e:	6018      	str	r0, [r3, #0]
    *(uint32_t *) WDT_REG = 0x00000001;
   d4170:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
   d4174:	601c      	str	r4, [r3, #0]
   d4176:	bd10      	pop	{r4, pc}
   d4178:	d2f1a9fc 	.word	0xd2f1a9fc
   d417c:	4040624d 	.word	0x4040624d
   d4180:	40010508 	.word	0x40010508
   d4184:	40010504 	.word	0x40010504

000d4188 <_ZN8WatchDog3petEv>:
}

void WatchDog::pet() {
    *(uint32_t *) WDT_RR0_REG = WDT_RELOAD;
   d4188:	4b01      	ldr	r3, [pc, #4]	; (d4190 <_ZN8WatchDog3petEv+0x8>)
   d418a:	4a02      	ldr	r2, [pc, #8]	; (d4194 <_ZN8WatchDog3petEv+0xc>)
   d418c:	601a      	str	r2, [r3, #0]
   d418e:	4770      	bx	lr
   d4190:	40010600 	.word	0x40010600
   d4194:	6e524635 	.word	0x6e524635

000d4198 <_GLOBAL__sub_I__ZN8WatchDog10initializeEm>:
   d4198:	f000 b810 	b.w	d41bc <HAL_Pin_Map>

000d419c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d419c:	b508      	push	{r3, lr}
   d419e:	4b02      	ldr	r3, [pc, #8]	; (d41a8 <netdb_freeaddrinfo+0xc>)
   d41a0:	681b      	ldr	r3, [r3, #0]
   d41a2:	689b      	ldr	r3, [r3, #8]
   d41a4:	9301      	str	r3, [sp, #4]
   d41a6:	bd08      	pop	{r3, pc}
   d41a8:	00030268 	.word	0x00030268

000d41ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41ac:	b508      	push	{r3, lr}
   d41ae:	4b02      	ldr	r3, [pc, #8]	; (d41b8 <netdb_getaddrinfo+0xc>)
   d41b0:	681b      	ldr	r3, [r3, #0]
   d41b2:	68db      	ldr	r3, [r3, #12]
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	bd08      	pop	{r3, pc}
   d41b8:	00030268 	.word	0x00030268

000d41bc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d41bc:	b508      	push	{r3, lr}
   d41be:	4b02      	ldr	r3, [pc, #8]	; (d41c8 <HAL_Pin_Map+0xc>)
   d41c0:	681b      	ldr	r3, [r3, #0]
   d41c2:	681b      	ldr	r3, [r3, #0]
   d41c4:	9301      	str	r3, [sp, #4]
   d41c6:	bd08      	pop	{r3, pc}
   d41c8:	0003022c 	.word	0x0003022c

000d41cc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d41cc:	b508      	push	{r3, lr}
   d41ce:	4b02      	ldr	r3, [pc, #8]	; (d41d8 <HAL_Pin_Mode+0xc>)
   d41d0:	681b      	ldr	r3, [r3, #0]
   d41d2:	689b      	ldr	r3, [r3, #8]
   d41d4:	9301      	str	r3, [sp, #4]
   d41d6:	bd08      	pop	{r3, pc}
   d41d8:	0003022c 	.word	0x0003022c

000d41dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d41dc:	b508      	push	{r3, lr}
   d41de:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <HAL_Get_Pin_Mode+0xc>)
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	68db      	ldr	r3, [r3, #12]
   d41e4:	9301      	str	r3, [sp, #4]
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	0003022c 	.word	0x0003022c

000d41ec <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d41ec:	b508      	push	{r3, lr}
   d41ee:	4b02      	ldr	r3, [pc, #8]	; (d41f8 <HAL_GPIO_Read+0xc>)
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	695b      	ldr	r3, [r3, #20]
   d41f4:	9301      	str	r3, [sp, #4]
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	0003022c 	.word	0x0003022c

000d41fc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <HAL_SPI_Init+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	69db      	ldr	r3, [r3, #28]
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	00030230 	.word	0x00030230

000d420c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <HAL_SPI_Is_Enabled+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	6a1b      	ldr	r3, [r3, #32]
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	00030230 	.word	0x00030230

000d421c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <HAL_RNG_GetRandomNumber+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	685b      	ldr	r3, [r3, #4]
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	00030218 	.word	0x00030218

000d422c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	695b      	ldr	r3, [r3, #20]
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	00030218 	.word	0x00030218

000d423c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	00030234 	.word	0x00030234

000d424c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <os_thread_is_current+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	689b      	ldr	r3, [r3, #8]
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	00030248 	.word	0x00030248

000d425c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <os_thread_join+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	691b      	ldr	r3, [r3, #16]
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	00030248 	.word	0x00030248

000d426c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <os_thread_cleanup+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	695b      	ldr	r3, [r3, #20]
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	00030248 	.word	0x00030248

000d427c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <os_mutex_create+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	00030248 	.word	0x00030248

000d428c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <os_mutex_recursive_create+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	00030248 	.word	0x00030248

000d429c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <inet_inet_ntop+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	695b      	ldr	r3, [r3, #20]
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	00030264 	.word	0x00030264

000d42ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <HAL_USART_Init+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	681b      	ldr	r3, [r3, #0]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	0003023c 	.word	0x0003023c

000d42bc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <HAL_USART_Write_Data+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	68db      	ldr	r3, [r3, #12]
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	0003023c 	.word	0x0003023c

000d42cc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <HAL_USART_Available_Data+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	691b      	ldr	r3, [r3, #16]
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	0003023c 	.word	0x0003023c

000d42dc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <HAL_USART_Read_Data+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	695b      	ldr	r3, [r3, #20]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	0003023c 	.word	0x0003023c

000d42ec <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <HAL_USART_Peek_Data+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	699b      	ldr	r3, [r3, #24]
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	0003023c 	.word	0x0003023c

000d42fc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <HAL_USART_Flush_Data+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	69db      	ldr	r3, [r3, #28]
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	0003023c 	.word	0x0003023c

000d430c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <HAL_USART_Is_Enabled+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	6a1b      	ldr	r3, [r3, #32]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	0003023c 	.word	0x0003023c

000d431c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <HAL_USART_Available_Data_For_Write+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	0003023c 	.word	0x0003023c

000d432c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <HAL_I2C_Write_Data+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	6a1b      	ldr	r3, [r3, #32]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	00030228 	.word	0x00030228

000d433c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <HAL_I2C_Available_Data+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	00030228 	.word	0x00030228

000d434c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_I2C_Read_Data+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	00030228 	.word	0x00030228

000d435c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_I2C_Peek_Data+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	00030228 	.word	0x00030228

000d436c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_I2C_Flush_Data+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	00030228 	.word	0x00030228

000d437c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_I2C_Is_Enabled+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	00030228 	.word	0x00030228

000d438c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <HAL_I2C_Init+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	00030228 	.word	0x00030228

000d439c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <HAL_USB_USART_Init+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	681b      	ldr	r3, [r3, #0]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	0003024c 	.word	0x0003024c

000d43ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <HAL_USB_USART_Available_Data+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	691b      	ldr	r3, [r3, #16]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	0003024c 	.word	0x0003024c

000d43bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	695b      	ldr	r3, [r3, #20]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	0003024c 	.word	0x0003024c

000d43cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_USB_USART_Receive_Data+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	699b      	ldr	r3, [r3, #24]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	0003024c 	.word	0x0003024c

000d43dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <HAL_USB_USART_Send_Data+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	69db      	ldr	r3, [r3, #28]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	0003024c 	.word	0x0003024c

000d43ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <HAL_USB_USART_Flush_Data+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	6a1b      	ldr	r3, [r3, #32]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	0003024c 	.word	0x0003024c

000d43fc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <LED_SetSignalingColor+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	685b      	ldr	r3, [r3, #4]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	00030260 	.word	0x00030260

000d440c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <LED_Signaling_Start+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	689b      	ldr	r3, [r3, #8]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	00030260 	.word	0x00030260

000d441c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <LED_Signaling_Stop+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	68db      	ldr	r3, [r3, #12]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	00030260 	.word	0x00030260

000d442c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <LED_RGB_IsOverRidden+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	699b      	ldr	r3, [r3, #24]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030260 	.word	0x00030260

000d443c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <LED_On+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	69db      	ldr	r3, [r3, #28]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030260 	.word	0x00030260

000d444c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <set_system_mode+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	685b      	ldr	r3, [r3, #4]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030220 	.word	0x00030220

000d445c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <system_delay_ms+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	695b      	ldr	r3, [r3, #20]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030220 	.word	0x00030220

000d446c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b03      	ldr	r3, [pc, #12]	; (d447c <system_ctrl_set_app_request_handler+0x10>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4476:	9301      	str	r3, [sp, #4]
   d4478:	bd08      	pop	{r3, pc}
   d447a:	0000      	.short	0x0000
   d447c:	00030220 	.word	0x00030220

000d4480 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b03      	ldr	r3, [pc, #12]	; (d4490 <system_ctrl_set_result+0x10>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d448a:	9301      	str	r3, [sp, #4]
   d448c:	bd08      	pop	{r3, pc}
   d448e:	0000      	.short	0x0000
   d4490:	00030220 	.word	0x00030220

000d4494 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <network_connect+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	685b      	ldr	r3, [r3, #4]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030240 	.word	0x00030240

000d44a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <network_connecting+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	689b      	ldr	r3, [r3, #8]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030240 	.word	0x00030240

000d44b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <network_disconnect+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	68db      	ldr	r3, [r3, #12]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030240 	.word	0x00030240

000d44c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <network_ready+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	691b      	ldr	r3, [r3, #16]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030240 	.word	0x00030240

000d44d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <network_on+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	695b      	ldr	r3, [r3, #20]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030240 	.word	0x00030240

000d44e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <network_off+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	699b      	ldr	r3, [r3, #24]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030240 	.word	0x00030240

000d44f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <network_listen+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	69db      	ldr	r3, [r3, #28]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030240 	.word	0x00030240

000d4504 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <network_listening+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6a1b      	ldr	r3, [r3, #32]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030240 	.word	0x00030240

000d4514 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <network_set_listen_timeout+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030240 	.word	0x00030240

000d4524 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <network_get_listen_timeout+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030240 	.word	0x00030240

000d4534 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030244 	.word	0x00030244

000d4544 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <malloc+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	681b      	ldr	r3, [r3, #0]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	0003021c 	.word	0x0003021c

000d4554 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <free+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	685b      	ldr	r3, [r3, #4]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003021c 	.word	0x0003021c

000d4564 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4564:	2200      	movs	r2, #0
   d4566:	4611      	mov	r1, r2
   d4568:	6840      	ldr	r0, [r0, #4]
   d456a:	f7ff bfcb 	b.w	d4504 <network_listening>

000d456e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d456e:	2200      	movs	r2, #0
   d4570:	4611      	mov	r1, r2
   d4572:	6840      	ldr	r0, [r0, #4]
   d4574:	f7ff bfd6 	b.w	d4524 <network_get_listen_timeout>

000d4578 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4578:	2200      	movs	r2, #0
   d457a:	6840      	ldr	r0, [r0, #4]
   d457c:	f7ff bfca 	b.w	d4514 <network_set_listen_timeout>

000d4580 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4580:	2200      	movs	r2, #0
   d4582:	f081 0101 	eor.w	r1, r1, #1
   d4586:	6840      	ldr	r0, [r0, #4]
   d4588:	f7ff bfb4 	b.w	d44f4 <network_listen>

000d458c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d458c:	2300      	movs	r3, #0
   d458e:	461a      	mov	r2, r3
   d4590:	4619      	mov	r1, r3
   d4592:	6840      	ldr	r0, [r0, #4]
   d4594:	f7ff bfa6 	b.w	d44e4 <network_off>

000d4598 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4598:	2300      	movs	r3, #0
   d459a:	461a      	mov	r2, r3
   d459c:	4619      	mov	r1, r3
   d459e:	6840      	ldr	r0, [r0, #4]
   d45a0:	f7ff bf98 	b.w	d44d4 <network_on>

000d45a4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45a4:	2200      	movs	r2, #0
   d45a6:	4611      	mov	r1, r2
   d45a8:	6840      	ldr	r0, [r0, #4]
   d45aa:	f7ff bf8b 	b.w	d44c4 <network_ready>

000d45ae <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d45ae:	2200      	movs	r2, #0
   d45b0:	4611      	mov	r1, r2
   d45b2:	6840      	ldr	r0, [r0, #4]
   d45b4:	f7ff bf76 	b.w	d44a4 <network_connecting>

000d45b8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d45b8:	2200      	movs	r2, #0
   d45ba:	2102      	movs	r1, #2
   d45bc:	6840      	ldr	r0, [r0, #4]
   d45be:	f7ff bf79 	b.w	d44b4 <network_disconnect>

000d45c2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d45c2:	2300      	movs	r3, #0
   d45c4:	461a      	mov	r2, r3
   d45c6:	6840      	ldr	r0, [r0, #4]
   d45c8:	f7ff bf64 	b.w	d4494 <network_connect>

000d45cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45cc:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45ce:	2203      	movs	r2, #3
   d45d0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45d2:	4a02      	ldr	r2, [pc, #8]	; (d45dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45d4:	601a      	str	r2, [r3, #0]
   d45d6:	4770      	bx	lr
   d45d8:	2003e3cc 	.word	0x2003e3cc
   d45dc:	000d5b58 	.word	0x000d5b58

000d45e0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d45e0:	4770      	bx	lr

000d45e2 <_ZN8SPIClassD0Ev>:
   d45e2:	b510      	push	{r4, lr}
   d45e4:	2110      	movs	r1, #16
   d45e6:	4604      	mov	r4, r0
   d45e8:	f000 fd21 	bl	d502e <_ZdlPvj>
   d45ec:	4620      	mov	r0, r4
   d45ee:	bd10      	pop	{r4, pc}

000d45f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d45f0:	b570      	push	{r4, r5, r6, lr}
   d45f2:	4b08      	ldr	r3, [pc, #32]	; (d4614 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d45f4:	6003      	str	r3, [r0, #0]
   d45f6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d45f8:	2500      	movs	r5, #0
   d45fa:	460e      	mov	r6, r1
   d45fc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4600:	f7ff fe3c 	bl	d427c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4604:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4606:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4608:	f7ff fdf8 	bl	d41fc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d460c:	60a5      	str	r5, [r4, #8]
}
   d460e:	4620      	mov	r0, r4
   d4610:	bd70      	pop	{r4, r5, r6, pc}
   d4612:	bf00      	nop
   d4614:	000d5b8c 	.word	0x000d5b8c

000d4618 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4618:	7900      	ldrb	r0, [r0, #4]
   d461a:	f7ff bdf7 	b.w	d420c <HAL_SPI_Is_Enabled>
	...

000d4620 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4620:	4b04      	ldr	r3, [pc, #16]	; (d4634 <_GLOBAL__sub_I_System+0x14>)
   d4622:	2000      	movs	r0, #0
   d4624:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4628:	7018      	strb	r0, [r3, #0]
   d462a:	8058      	strh	r0, [r3, #2]
   d462c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d462e:	f7ff bf0d 	b.w	d444c <set_system_mode>
   d4632:	bf00      	nop
   d4634:	2003e3d4 	.word	0x2003e3d4

000d4638 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4638:	4802      	ldr	r0, [pc, #8]	; (d4644 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d463a:	2300      	movs	r3, #0
   d463c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d463e:	f7ff be25 	b.w	d428c <os_mutex_recursive_create>
   d4642:	bf00      	nop
   d4644:	2003e3dc 	.word	0x2003e3dc

000d4648 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d464a:	4606      	mov	r6, r0
   d464c:	460d      	mov	r5, r1
   d464e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4650:	2400      	movs	r4, #0
  while (size--) {
   d4652:	42bd      	cmp	r5, r7
   d4654:	d00c      	beq.n	d4670 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4656:	6833      	ldr	r3, [r6, #0]
   d4658:	f815 1b01 	ldrb.w	r1, [r5], #1
   d465c:	689b      	ldr	r3, [r3, #8]
   d465e:	4630      	mov	r0, r6
   d4660:	4798      	blx	r3
     if (chunk>=0)
   d4662:	2800      	cmp	r0, #0
   d4664:	db01      	blt.n	d466a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4666:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4668:	e7f3      	b.n	d4652 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d466a:	2c00      	cmp	r4, #0
   d466c:	bf08      	it	eq
   d466e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4670:	4620      	mov	r0, r4
   d4672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4674 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4674:	b570      	push	{r4, r5, r6, lr}
   d4676:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4678:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d467a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d467c:	b149      	cbz	r1, d4692 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d467e:	f001 fa55 	bl	d5b2c <strlen>
   d4682:	682b      	ldr	r3, [r5, #0]
   d4684:	4602      	mov	r2, r0
   d4686:	4621      	mov	r1, r4
   d4688:	4628      	mov	r0, r5
   d468a:	68db      	ldr	r3, [r3, #12]
    }
   d468c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4690:	4718      	bx	r3
    }
   d4692:	bd70      	pop	{r4, r5, r6, pc}

000d4694 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4694:	6803      	ldr	r3, [r0, #0]
   d4696:	689b      	ldr	r3, [r3, #8]
   d4698:	4718      	bx	r3

000d469a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d469a:	b530      	push	{r4, r5, lr}
   d469c:	b08b      	sub	sp, #44	; 0x2c
   d469e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d46a0:	2100      	movs	r1, #0
   d46a2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d46a6:	2a01      	cmp	r2, #1
   d46a8:	bf98      	it	ls
   d46aa:	220a      	movls	r2, #10
   d46ac:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d46b0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d46b4:	fb05 3312 	mls	r3, r5, r2, r3
   d46b8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d46bc:	2b09      	cmp	r3, #9
   d46be:	bf94      	ite	ls
   d46c0:	3330      	addls	r3, #48	; 0x30
   d46c2:	3337      	addhi	r3, #55	; 0x37
   d46c4:	b2db      	uxtb	r3, r3
   d46c6:	4621      	mov	r1, r4
   d46c8:	f804 3901 	strb.w	r3, [r4], #-1
   d46cc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d46ce:	2d00      	cmp	r5, #0
   d46d0:	d1ee      	bne.n	d46b0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d46d2:	f7ff ffcf 	bl	d4674 <_ZN5Print5writeEPKc>
}
   d46d6:	b00b      	add	sp, #44	; 0x2c
   d46d8:	bd30      	pop	{r4, r5, pc}

000d46da <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d46da:	b410      	push	{r4}
  if (base == 0) return write(n);
   d46dc:	b92a      	cbnz	r2, d46ea <_ZN5Print5printEmi+0x10>
   d46de:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d46e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d46e4:	689b      	ldr	r3, [r3, #8]
   d46e6:	b2c9      	uxtb	r1, r1
   d46e8:	4718      	bx	r3
  else return printNumber(n, base);
   d46ea:	b2d2      	uxtb	r2, r2
}
   d46ec:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d46f0:	f7ff bfd3 	b.w	d469a <_ZN5Print11printNumberEmh>

000d46f4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d46f4:	f7ff bff1 	b.w	d46da <_ZN5Print5printEmi>

000d46f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d46f8:	4b01      	ldr	r3, [pc, #4]	; (d4700 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d46fa:	4a02      	ldr	r2, [pc, #8]	; (d4704 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d46fc:	601a      	str	r2, [r3, #0]
   d46fe:	4770      	bx	lr
   d4700:	2003e3e0 	.word	0x2003e3e0
   d4704:	000d5c4c 	.word	0x000d5c4c

000d4708 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4708:	4b02      	ldr	r3, [pc, #8]	; (d4714 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d470a:	681a      	ldr	r2, [r3, #0]
   d470c:	4b02      	ldr	r3, [pc, #8]	; (d4718 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d470e:	601a      	str	r2, [r3, #0]
   d4710:	4770      	bx	lr
   d4712:	bf00      	nop
   d4714:	2003e358 	.word	0x2003e358
   d4718:	2003e3e4 	.word	0x2003e3e4

000d471c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d471c:	2100      	movs	r1, #0
   d471e:	f7ff be9d 	b.w	d445c <system_delay_ms>

000d4722 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4722:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4724:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4726:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4728:	b113      	cbz	r3, d4730 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d472a:	2203      	movs	r2, #3
   d472c:	4601      	mov	r1, r0
   d472e:	4798      	blx	r3
    }
   d4730:	4620      	mov	r0, r4
   d4732:	bd10      	pop	{r4, pc}

000d4734 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4734:	b510      	push	{r4, lr}
   d4736:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4738:	f7ff fff3 	bl	d4722 <_ZNSt14_Function_baseD1Ev>
   d473c:	4620      	mov	r0, r4
   d473e:	bd10      	pop	{r4, pc}

000d4740 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d4740:	b510      	push	{r4, lr}
   d4742:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d4744:	f7ff fe72 	bl	d442c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d4748:	4284      	cmp	r4, r0
   d474a:	d008      	beq.n	d475e <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d474c:	b11c      	cbz	r4, d4756 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d4752:	f7ff be5b 	b.w	d440c <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d4756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d475a:	f7ff be5f 	b.w	d441c <LED_Signaling_Stop>
   d475e:	bd10      	pop	{r4, pc}

000d4760 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d4760:	b570      	push	{r4, r5, r6, lr}
   d4762:	4605      	mov	r5, r0
   d4764:	460e      	mov	r6, r1
   d4766:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d4768:	f7ff fe60 	bl	d442c <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d476c:	b150      	cbz	r0, d4784 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d476e:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d4772:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d4776:	f7ff fe41 	bl	d43fc <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d477a:	20e7      	movs	r0, #231	; 0xe7
}
   d477c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d4780:	f7ff be5c 	b.w	d443c <LED_On>
   d4784:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4788 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4788:	4803      	ldr	r0, [pc, #12]	; (d4798 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d478a:	4a04      	ldr	r2, [pc, #16]	; (d479c <_GLOBAL__sub_I_RGB+0x14>)
   d478c:	4904      	ldr	r1, [pc, #16]	; (d47a0 <_GLOBAL__sub_I_RGB+0x18>)
   d478e:	2300      	movs	r3, #0
   d4790:	6083      	str	r3, [r0, #8]
   d4792:	f000 bc47 	b.w	d5024 <__aeabi_atexit>
   d4796:	bf00      	nop
   d4798:	2003e3e8 	.word	0x2003e3e8
   d479c:	2003e3c0 	.word	0x2003e3c0
   d47a0:	000d4735 	.word	0x000d4735

000d47a4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d47a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d47a6:	4b0c      	ldr	r3, [pc, #48]	; (d47d8 <serialEventRun+0x34>)
   d47a8:	b133      	cbz	r3, d47b8 <serialEventRun+0x14>
   d47aa:	f000 f935 	bl	d4a18 <_Z16_fetch_usbserialv>
   d47ae:	6803      	ldr	r3, [r0, #0]
   d47b0:	691b      	ldr	r3, [r3, #16]
   d47b2:	4798      	blx	r3
   d47b4:	2800      	cmp	r0, #0
   d47b6:	dc09      	bgt.n	d47cc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d47b8:	4b08      	ldr	r3, [pc, #32]	; (d47dc <serialEventRun+0x38>)
   d47ba:	b163      	cbz	r3, d47d6 <serialEventRun+0x32>
   d47bc:	f000 f9ae 	bl	d4b1c <_Z22__fetch_global_Serial1v>
   d47c0:	6803      	ldr	r3, [r0, #0]
   d47c2:	691b      	ldr	r3, [r3, #16]
   d47c4:	4798      	blx	r3
   d47c6:	2800      	cmp	r0, #0
   d47c8:	dc03      	bgt.n	d47d2 <serialEventRun+0x2e>
   d47ca:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d47cc:	f3af 8000 	nop.w
   d47d0:	e7f2      	b.n	d47b8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d47d2:	f3af 8000 	nop.w
   d47d6:	bd08      	pop	{r3, pc}
	...

000d47e0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d47e0:	b508      	push	{r3, lr}
	serialEventRun();
   d47e2:	f7ff ffdf 	bl	d47a4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d47e6:	f7ff fd21 	bl	d422c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d47ea:	4b01      	ldr	r3, [pc, #4]	; (d47f0 <_post_loop+0x10>)
   d47ec:	6018      	str	r0, [r3, #0]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	2003e734 	.word	0x2003e734

000d47f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d47f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d47f6:	2300      	movs	r3, #0
   d47f8:	9300      	str	r3, [sp, #0]
   d47fa:	461a      	mov	r2, r3
   d47fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4800:	f7ff fe3e 	bl	d4480 <system_ctrl_set_result>
}
   d4804:	b003      	add	sp, #12
   d4806:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d480c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d480c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d480e:	8843      	ldrh	r3, [r0, #2]
   d4810:	2b0a      	cmp	r3, #10
   d4812:	d008      	beq.n	d4826 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4814:	2b50      	cmp	r3, #80	; 0x50
   d4816:	d109      	bne.n	d482c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4818:	4b09      	ldr	r3, [pc, #36]	; (d4840 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d481a:	681b      	ldr	r3, [r3, #0]
   d481c:	b13b      	cbz	r3, d482e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d481e:	b003      	add	sp, #12
   d4820:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4824:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4826:	f7ff ffe5 	bl	d47f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d482a:	e006      	b.n	d483a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d482c:	2300      	movs	r3, #0
   d482e:	9300      	str	r3, [sp, #0]
   d4830:	461a      	mov	r2, r3
   d4832:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4836:	f7ff fe23 	bl	d4480 <system_ctrl_set_result>
        break;
    }
}
   d483a:	b003      	add	sp, #12
   d483c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4840:	2003e3f8 	.word	0x2003e3f8

000d4844 <module_user_init_hook>:

void module_user_init_hook()
{
   d4844:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4846:	f7ff fce9 	bl	d421c <HAL_RNG_GetRandomNumber>
   d484a:	4604      	mov	r4, r0
    srand(seed);
   d484c:	f001 f946 	bl	d5adc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4850:	4b07      	ldr	r3, [pc, #28]	; (d4870 <module_user_init_hook+0x2c>)
   d4852:	b113      	cbz	r3, d485a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4854:	4620      	mov	r0, r4
   d4856:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d485a:	2100      	movs	r1, #0
   d485c:	4804      	ldr	r0, [pc, #16]	; (d4870 <module_user_init_hook+0x2c>)
   d485e:	f7ff fe69 	bl	d4534 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4862:	2100      	movs	r1, #0
   d4864:	4803      	ldr	r0, [pc, #12]	; (d4874 <module_user_init_hook+0x30>)
}
   d4866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d486a:	f7ff bdff 	b.w	d446c <system_ctrl_set_app_request_handler>
   d486e:	bf00      	nop
   d4870:	00000000 	.word	0x00000000
   d4874:	000d480d 	.word	0x000d480d

000d4878 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4878:	4770      	bx	lr

000d487a <_ZN9IPAddressD0Ev>:
   d487a:	b510      	push	{r4, lr}
   d487c:	2118      	movs	r1, #24
   d487e:	4604      	mov	r4, r0
   d4880:	f000 fbd5 	bl	d502e <_ZdlPvj>
   d4884:	4620      	mov	r0, r4
   d4886:	bd10      	pop	{r4, pc}

000d4888 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4888:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d488a:	7d03      	ldrb	r3, [r0, #20]
   d488c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d488e:	b08d      	sub	sp, #52	; 0x34
   d4890:	460e      	mov	r6, r1
   d4892:	f100 0704 	add.w	r7, r0, #4
   d4896:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d489a:	d002      	beq.n	d48a2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d489c:	f100 0508 	add.w	r5, r0, #8
   d48a0:	e018      	b.n	d48d4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d48a2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d48a4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d48a6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d48aa:	232f      	movs	r3, #47	; 0x2f
   d48ac:	462a      	mov	r2, r5
   d48ae:	200a      	movs	r0, #10
   d48b0:	f7ff fcf4 	bl	d429c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d48b4:	4628      	mov	r0, r5
   d48b6:	f001 f939 	bl	d5b2c <strlen>
   d48ba:	6833      	ldr	r3, [r6, #0]
   d48bc:	4602      	mov	r2, r0
   d48be:	68db      	ldr	r3, [r3, #12]
   d48c0:	4629      	mov	r1, r5
   d48c2:	4630      	mov	r0, r6
   d48c4:	4798      	blx	r3
   d48c6:	e00f      	b.n	d48e8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d48c8:	b124      	cbz	r4, d48d4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d48ca:	212e      	movs	r1, #46	; 0x2e
   d48cc:	4630      	mov	r0, r6
   d48ce:	f7ff fee1 	bl	d4694 <_ZN5Print5printEc>
   d48d2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d48d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d48d8:	220a      	movs	r2, #10
   d48da:	4630      	mov	r0, r6
   d48dc:	f7ff ff0a 	bl	d46f4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d48e0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d48e2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d48e4:	d1f0      	bne.n	d48c8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d48e6:	4620      	mov	r0, r4
    }
    return n;
}
   d48e8:	b00d      	add	sp, #52	; 0x34
   d48ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d48ec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d48ec:	b510      	push	{r4, lr}
   d48ee:	4b05      	ldr	r3, [pc, #20]	; (d4904 <_ZN9IPAddressC1Ev+0x18>)
   d48f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d48f2:	2211      	movs	r2, #17
   d48f4:	f840 3b04 	str.w	r3, [r0], #4
   d48f8:	2100      	movs	r1, #0
   d48fa:	f001 f8e6 	bl	d5aca <memset>
{
    clear();
}
   d48fe:	4620      	mov	r0, r4
   d4900:	bd10      	pop	{r4, pc}
   d4902:	bf00      	nop
   d4904:	000d5ca8 	.word	0x000d5ca8

000d4908 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4908:	4603      	mov	r3, r0
   d490a:	4a07      	ldr	r2, [pc, #28]	; (d4928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d490c:	b510      	push	{r4, lr}
   d490e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4912:	f101 0210 	add.w	r2, r1, #16
   d4916:	f851 4b04 	ldr.w	r4, [r1], #4
   d491a:	f843 4b04 	str.w	r4, [r3], #4
   d491e:	4291      	cmp	r1, r2
   d4920:	d1f9      	bne.n	d4916 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4922:	780a      	ldrb	r2, [r1, #0]
   d4924:	701a      	strb	r2, [r3, #0]
}
   d4926:	bd10      	pop	{r4, pc}
   d4928:	000d5ca8 	.word	0x000d5ca8

000d492c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d492c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d492e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4932:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4936:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d493a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d493e:	2304      	movs	r3, #4
   d4940:	6041      	str	r1, [r0, #4]
   d4942:	7503      	strb	r3, [r0, #20]
   d4944:	bd10      	pop	{r4, pc}

000d4946 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4946:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4948:	780d      	ldrb	r5, [r1, #0]
   d494a:	788b      	ldrb	r3, [r1, #2]
   d494c:	784a      	ldrb	r2, [r1, #1]
   d494e:	78c9      	ldrb	r1, [r1, #3]
   d4950:	9100      	str	r1, [sp, #0]
   d4952:	4629      	mov	r1, r5
   d4954:	f7ff ffea 	bl	d492c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4958:	b003      	add	sp, #12
   d495a:	bd30      	pop	{r4, r5, pc}

000d495c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d495c:	7441      	strb	r1, [r0, #17]
   d495e:	4770      	bx	lr

000d4960 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4960:	4770      	bx	lr

000d4962 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4962:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4964:	2100      	movs	r1, #0
   d4966:	7c00      	ldrb	r0, [r0, #16]
   d4968:	f7ff fd30 	bl	d43cc <HAL_USB_USART_Receive_Data>
}
   d496c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4970:	bf28      	it	cs
   d4972:	f04f 30ff 	movcs.w	r0, #4294967295
   d4976:	bd08      	pop	{r3, pc}

000d4978 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4978:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d497a:	2101      	movs	r1, #1
   d497c:	7c00      	ldrb	r0, [r0, #16]
   d497e:	f7ff fd25 	bl	d43cc <HAL_USB_USART_Receive_Data>
}
   d4982:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4986:	bf28      	it	cs
   d4988:	f04f 30ff 	movcs.w	r0, #4294967295
   d498c:	bd08      	pop	{r3, pc}

000d498e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d498e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4990:	7c00      	ldrb	r0, [r0, #16]
   d4992:	f7ff fd13 	bl	d43bc <HAL_USB_USART_Available_Data_For_Write>
}
   d4996:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d499a:	bd08      	pop	{r3, pc}

000d499c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d499c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d499e:	7c00      	ldrb	r0, [r0, #16]
   d49a0:	f7ff fd04 	bl	d43ac <HAL_USB_USART_Available_Data>
}
   d49a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49a8:	bd08      	pop	{r3, pc}

000d49aa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d49aa:	7c00      	ldrb	r0, [r0, #16]
   d49ac:	f7ff bd1e 	b.w	d43ec <HAL_USB_USART_Flush_Data>

000d49b0 <_ZN9USBSerialD0Ev>:
   d49b0:	b510      	push	{r4, lr}
   d49b2:	2114      	movs	r1, #20
   d49b4:	4604      	mov	r4, r0
   d49b6:	f000 fb3a 	bl	d502e <_ZdlPvj>
   d49ba:	4620      	mov	r0, r4
   d49bc:	bd10      	pop	{r4, pc}

000d49be <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d49be:	b538      	push	{r3, r4, r5, lr}
   d49c0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d49c2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d49c4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d49c6:	f7ff fcf9 	bl	d43bc <HAL_USB_USART_Available_Data_For_Write>
   d49ca:	2800      	cmp	r0, #0
   d49cc:	dc01      	bgt.n	d49d2 <_ZN9USBSerial5writeEh+0x14>
   d49ce:	7c60      	ldrb	r0, [r4, #17]
   d49d0:	b128      	cbz	r0, d49de <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d49d2:	4629      	mov	r1, r5
   d49d4:	7c20      	ldrb	r0, [r4, #16]
   d49d6:	f7ff fd01 	bl	d43dc <HAL_USB_USART_Send_Data>
   d49da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d49de:	bd38      	pop	{r3, r4, r5, pc}

000d49e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d49e0:	b510      	push	{r4, lr}
   d49e2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d49e4:	2300      	movs	r3, #0
   d49e6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d49e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49ec:	60a3      	str	r3, [r4, #8]
   d49ee:	4b05      	ldr	r3, [pc, #20]	; (d4a04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d49f0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d49f2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d49f4:	4608      	mov	r0, r1
{
  _serial = serial;
   d49f6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d49f8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d49fa:	4611      	mov	r1, r2
   d49fc:	f7ff fcce 	bl	d439c <HAL_USB_USART_Init>
}
   d4a00:	4620      	mov	r0, r4
   d4a02:	bd10      	pop	{r4, pc}
   d4a04:	000d5cbc 	.word	0x000d5cbc

000d4a08 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4a08:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4a0a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4a0c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4a0e:	2100      	movs	r1, #0
   d4a10:	f001 f85b 	bl	d5aca <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4a14:	4620      	mov	r0, r4
   d4a16:	bd10      	pop	{r4, pc}

000d4a18 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4a18:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a1a:	4d0e      	ldr	r5, [pc, #56]	; (d4a54 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4a1c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4a1e:	a801      	add	r0, sp, #4
   d4a20:	f7ff fff2 	bl	d4a08 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a24:	6829      	ldr	r1, [r5, #0]
   d4a26:	f011 0401 	ands.w	r4, r1, #1
   d4a2a:	d110      	bne.n	d4a4e <_Z16_fetch_usbserialv+0x36>
   d4a2c:	4628      	mov	r0, r5
   d4a2e:	f7ff fb36 	bl	d409e <__cxa_guard_acquire>
   d4a32:	b160      	cbz	r0, d4a4e <_Z16_fetch_usbserialv+0x36>
   d4a34:	aa01      	add	r2, sp, #4
   d4a36:	4621      	mov	r1, r4
   d4a38:	4807      	ldr	r0, [pc, #28]	; (d4a58 <_Z16_fetch_usbserialv+0x40>)
   d4a3a:	f7ff ffd1 	bl	d49e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4a3e:	4628      	mov	r0, r5
   d4a40:	f7ff fb32 	bl	d40a8 <__cxa_guard_release>
   d4a44:	4a05      	ldr	r2, [pc, #20]	; (d4a5c <_Z16_fetch_usbserialv+0x44>)
   d4a46:	4906      	ldr	r1, [pc, #24]	; (d4a60 <_Z16_fetch_usbserialv+0x48>)
   d4a48:	4803      	ldr	r0, [pc, #12]	; (d4a58 <_Z16_fetch_usbserialv+0x40>)
   d4a4a:	f000 faeb 	bl	d5024 <__aeabi_atexit>
	return _usbserial;
}
   d4a4e:	4802      	ldr	r0, [pc, #8]	; (d4a58 <_Z16_fetch_usbserialv+0x40>)
   d4a50:	b007      	add	sp, #28
   d4a52:	bd30      	pop	{r4, r5, pc}
   d4a54:	2003e3fc 	.word	0x2003e3fc
   d4a58:	2003e400 	.word	0x2003e400
   d4a5c:	2003e3c0 	.word	0x2003e3c0
   d4a60:	000d4961 	.word	0x000d4961

000d4a64 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4a64:	4770      	bx	lr

000d4a66 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4a66:	7441      	strb	r1, [r0, #17]
   d4a68:	4770      	bx	lr

000d4a6a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4a6a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4a6c:	7c00      	ldrb	r0, [r0, #16]
   d4a6e:	f7ff fc55 	bl	d431c <HAL_USART_Available_Data_For_Write>
}
   d4a72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a76:	bd08      	pop	{r3, pc}

000d4a78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4a78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4a7a:	7c00      	ldrb	r0, [r0, #16]
   d4a7c:	f7ff fc26 	bl	d42cc <HAL_USART_Available_Data>
}
   d4a80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a84:	bd08      	pop	{r3, pc}

000d4a86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4a86:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4a88:	7c00      	ldrb	r0, [r0, #16]
   d4a8a:	f7ff fc2f 	bl	d42ec <HAL_USART_Peek_Data>
}
   d4a8e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4a92:	bf28      	it	cs
   d4a94:	f04f 30ff 	movcs.w	r0, #4294967295
   d4a98:	bd08      	pop	{r3, pc}

000d4a9a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4a9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4a9c:	7c00      	ldrb	r0, [r0, #16]
   d4a9e:	f7ff fc1d 	bl	d42dc <HAL_USART_Read_Data>
}
   d4aa2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4aa6:	bf28      	it	cs
   d4aa8:	f04f 30ff 	movcs.w	r0, #4294967295
   d4aac:	bd08      	pop	{r3, pc}

000d4aae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4aae:	7c00      	ldrb	r0, [r0, #16]
   d4ab0:	f7ff bc24 	b.w	d42fc <HAL_USART_Flush_Data>

000d4ab4 <_ZN11USARTSerialD0Ev>:
   d4ab4:	b510      	push	{r4, lr}
   d4ab6:	2114      	movs	r1, #20
   d4ab8:	4604      	mov	r4, r0
   d4aba:	f000 fab8 	bl	d502e <_ZdlPvj>
   d4abe:	4620      	mov	r0, r4
   d4ac0:	bd10      	pop	{r4, pc}

000d4ac2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4ac2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4ac4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4ac6:	4604      	mov	r4, r0
   d4ac8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4aca:	b925      	cbnz	r5, d4ad6 <_ZN11USARTSerial5writeEh+0x14>
   d4acc:	7c00      	ldrb	r0, [r0, #16]
   d4ace:	f7ff fc25 	bl	d431c <HAL_USART_Available_Data_For_Write>
   d4ad2:	2800      	cmp	r0, #0
   d4ad4:	dd05      	ble.n	d4ae2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4ad6:	4631      	mov	r1, r6
   d4ad8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4ade:	f7ff bbed 	b.w	d42bc <HAL_USART_Write_Data>
  }
  return 0;
}
   d4ae2:	4628      	mov	r0, r5
   d4ae4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4ae8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4ae8:	b510      	push	{r4, lr}
   d4aea:	4604      	mov	r4, r0
   d4aec:	4608      	mov	r0, r1
   d4aee:	4611      	mov	r1, r2
   d4af0:	2200      	movs	r2, #0
   d4af2:	6062      	str	r2, [r4, #4]
   d4af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4af8:	60a2      	str	r2, [r4, #8]
   d4afa:	4a05      	ldr	r2, [pc, #20]	; (d4b10 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4afc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4afe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4b00:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4b02:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4b04:	461a      	mov	r2, r3
   d4b06:	f7ff fbd1 	bl	d42ac <HAL_USART_Init>
}
   d4b0a:	4620      	mov	r0, r4
   d4b0c:	bd10      	pop	{r4, pc}
   d4b0e:	bf00      	nop
   d4b10:	000d5cec 	.word	0x000d5cec

000d4b14 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4b14:	7c00      	ldrb	r0, [r0, #16]
   d4b16:	f7ff bbf9 	b.w	d430c <HAL_USART_Is_Enabled>
	...

000d4b1c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4b1c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4b1e:	4d0c      	ldr	r5, [pc, #48]	; (d4b50 <_Z22__fetch_global_Serial1v+0x34>)
   d4b20:	6829      	ldr	r1, [r5, #0]
   d4b22:	f011 0401 	ands.w	r4, r1, #1
   d4b26:	d111      	bne.n	d4b4c <_Z22__fetch_global_Serial1v+0x30>
   d4b28:	4628      	mov	r0, r5
   d4b2a:	f7ff fab8 	bl	d409e <__cxa_guard_acquire>
   d4b2e:	b168      	cbz	r0, d4b4c <_Z22__fetch_global_Serial1v+0x30>
   d4b30:	4a08      	ldr	r2, [pc, #32]	; (d4b54 <_Z22__fetch_global_Serial1v+0x38>)
   d4b32:	4b09      	ldr	r3, [pc, #36]	; (d4b58 <_Z22__fetch_global_Serial1v+0x3c>)
   d4b34:	4809      	ldr	r0, [pc, #36]	; (d4b5c <_Z22__fetch_global_Serial1v+0x40>)
   d4b36:	4621      	mov	r1, r4
   d4b38:	f7ff ffd6 	bl	d4ae8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4b3c:	4628      	mov	r0, r5
   d4b3e:	f7ff fab3 	bl	d40a8 <__cxa_guard_release>
   d4b42:	4a07      	ldr	r2, [pc, #28]	; (d4b60 <_Z22__fetch_global_Serial1v+0x44>)
   d4b44:	4907      	ldr	r1, [pc, #28]	; (d4b64 <_Z22__fetch_global_Serial1v+0x48>)
   d4b46:	4805      	ldr	r0, [pc, #20]	; (d4b5c <_Z22__fetch_global_Serial1v+0x40>)
   d4b48:	f000 fa6c 	bl	d5024 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4b4c:	4803      	ldr	r0, [pc, #12]	; (d4b5c <_Z22__fetch_global_Serial1v+0x40>)
   d4b4e:	bd38      	pop	{r3, r4, r5, pc}
   d4b50:	2003e4ac 	.word	0x2003e4ac
   d4b54:	2003e4b0 	.word	0x2003e4b0
   d4b58:	2003e428 	.word	0x2003e428
   d4b5c:	2003e414 	.word	0x2003e414
   d4b60:	2003e3c0 	.word	0x2003e3c0
   d4b64:	000d4a65 	.word	0x000d4a65

000d4b68 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4b68:	4770      	bx	lr

000d4b6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b6c:	4606      	mov	r6, r0
   d4b6e:	4615      	mov	r5, r2
   d4b70:	460c      	mov	r4, r1
   d4b72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4b74:	42bc      	cmp	r4, r7
   d4b76:	d006      	beq.n	d4b86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4b78:	6833      	ldr	r3, [r6, #0]
   d4b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4b7e:	689b      	ldr	r3, [r3, #8]
   d4b80:	4630      	mov	r0, r6
   d4b82:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4b84:	e7f6      	b.n	d4b74 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4b86:	4628      	mov	r0, r5
   d4b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b8a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4b8a:	2200      	movs	r2, #0
   d4b8c:	7c00      	ldrb	r0, [r0, #16]
   d4b8e:	f7ff bbcd 	b.w	d432c <HAL_I2C_Write_Data>

000d4b92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4b92:	2100      	movs	r1, #0
   d4b94:	7c00      	ldrb	r0, [r0, #16]
   d4b96:	f7ff bbd1 	b.w	d433c <HAL_I2C_Available_Data>

000d4b9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4b9a:	2100      	movs	r1, #0
   d4b9c:	7c00      	ldrb	r0, [r0, #16]
   d4b9e:	f7ff bbd5 	b.w	d434c <HAL_I2C_Read_Data>

000d4ba2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4ba2:	2100      	movs	r1, #0
   d4ba4:	7c00      	ldrb	r0, [r0, #16]
   d4ba6:	f7ff bbd9 	b.w	d435c <HAL_I2C_Peek_Data>

000d4baa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4baa:	2100      	movs	r1, #0
   d4bac:	7c00      	ldrb	r0, [r0, #16]
   d4bae:	f7ff bbdd 	b.w	d436c <HAL_I2C_Flush_Data>

000d4bb2 <_ZN7TwoWireD0Ev>:
   d4bb2:	b510      	push	{r4, lr}
   d4bb4:	2114      	movs	r1, #20
   d4bb6:	4604      	mov	r4, r0
   d4bb8:	f000 fa39 	bl	d502e <_ZdlPvj>
   d4bbc:	4620      	mov	r0, r4
   d4bbe:	bd10      	pop	{r4, pc}

000d4bc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4bc0:	b510      	push	{r4, lr}
   d4bc2:	4604      	mov	r4, r0
   d4bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bc8:	4608      	mov	r0, r1
   d4bca:	60a3      	str	r3, [r4, #8]
   d4bcc:	2100      	movs	r1, #0
   d4bce:	4b04      	ldr	r3, [pc, #16]	; (d4be0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4bd0:	7420      	strb	r0, [r4, #16]
   d4bd2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4bd4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4bd6:	f7ff fbd9 	bl	d438c <HAL_I2C_Init>

}
   d4bda:	4620      	mov	r0, r4
   d4bdc:	bd10      	pop	{r4, pc}
   d4bde:	bf00      	nop
   d4be0:	000d5d1c 	.word	0x000d5d1c

000d4be4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4be4:	2100      	movs	r1, #0
   d4be6:	7c00      	ldrb	r0, [r0, #16]
   d4be8:	f7ff bbc8 	b.w	d437c <HAL_I2C_Is_Enabled>

000d4bec <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4bec:	2200      	movs	r2, #0
   d4bee:	4611      	mov	r1, r2
   d4bf0:	6840      	ldr	r0, [r0, #4]
   d4bf2:	f7ff bc87 	b.w	d4504 <network_listening>

000d4bf6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4bf6:	2200      	movs	r2, #0
   d4bf8:	4611      	mov	r1, r2
   d4bfa:	6840      	ldr	r0, [r0, #4]
   d4bfc:	f7ff bc92 	b.w	d4524 <network_get_listen_timeout>

000d4c00 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c00:	2200      	movs	r2, #0
   d4c02:	6840      	ldr	r0, [r0, #4]
   d4c04:	f7ff bc86 	b.w	d4514 <network_set_listen_timeout>

000d4c08 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c08:	2200      	movs	r2, #0
   d4c0a:	f081 0101 	eor.w	r1, r1, #1
   d4c0e:	6840      	ldr	r0, [r0, #4]
   d4c10:	f7ff bc70 	b.w	d44f4 <network_listen>

000d4c14 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4c14:	2300      	movs	r3, #0
   d4c16:	461a      	mov	r2, r3
   d4c18:	4619      	mov	r1, r3
   d4c1a:	6840      	ldr	r0, [r0, #4]
   d4c1c:	f7ff bc62 	b.w	d44e4 <network_off>

000d4c20 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c20:	2300      	movs	r3, #0
   d4c22:	461a      	mov	r2, r3
   d4c24:	4619      	mov	r1, r3
   d4c26:	6840      	ldr	r0, [r0, #4]
   d4c28:	f7ff bc54 	b.w	d44d4 <network_on>

000d4c2c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c2c:	2200      	movs	r2, #0
   d4c2e:	4611      	mov	r1, r2
   d4c30:	6840      	ldr	r0, [r0, #4]
   d4c32:	f7ff bc47 	b.w	d44c4 <network_ready>

000d4c36 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c36:	2200      	movs	r2, #0
   d4c38:	4611      	mov	r1, r2
   d4c3a:	6840      	ldr	r0, [r0, #4]
   d4c3c:	f7ff bc32 	b.w	d44a4 <network_connecting>

000d4c40 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c40:	2200      	movs	r2, #0
   d4c42:	2102      	movs	r1, #2
   d4c44:	6840      	ldr	r0, [r0, #4]
   d4c46:	f7ff bc35 	b.w	d44b4 <network_disconnect>

000d4c4a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c4a:	2300      	movs	r3, #0
   d4c4c:	461a      	mov	r2, r3
   d4c4e:	6840      	ldr	r0, [r0, #4]
   d4c50:	f7ff bc20 	b.w	d4494 <network_connect>

000d4c54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4c54:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c56:	4605      	mov	r5, r0
   d4c58:	b188      	cbz	r0, d4c7e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c5a:	6804      	ldr	r4, [r0, #0]
   d4c5c:	b14c      	cbz	r4, d4c72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4c5e:	68a3      	ldr	r3, [r4, #8]
   d4c60:	b11b      	cbz	r3, d4c6a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c62:	2203      	movs	r2, #3
   d4c64:	4621      	mov	r1, r4
   d4c66:	4620      	mov	r0, r4
   d4c68:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c6a:	2110      	movs	r1, #16
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	f000 f9de 	bl	d502e <_ZdlPvj>
   d4c72:	4628      	mov	r0, r5
   d4c74:	2114      	movs	r1, #20
      }
   d4c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c7a:	f000 b9d8 	b.w	d502e <_ZdlPvj>
   d4c7e:	bd38      	pop	{r3, r4, r5, pc}

000d4c80 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d4c80:	b110      	cbz	r0, d4c88 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4c82:	6803      	ldr	r3, [r0, #0]
   d4c84:	685b      	ldr	r3, [r3, #4]
   d4c86:	4718      	bx	r3
   d4c88:	4770      	bx	lr

000d4c8a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4c8a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4c8c:	6803      	ldr	r3, [r0, #0]
   d4c8e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4c90:	b1bb      	cbz	r3, d4cc2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4c92:	6858      	ldr	r0, [r3, #4]
   d4c94:	f7ff fada 	bl	d424c <os_thread_is_current>
   d4c98:	b978      	cbnz	r0, d4cba <_ZN6ThreadD1Ev+0x30>
   d4c9a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4c9c:	7c5a      	ldrb	r2, [r3, #17]
   d4c9e:	b912      	cbnz	r2, d4ca6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4ca0:	6858      	ldr	r0, [r3, #4]
   d4ca2:	f7ff fadb 	bl	d425c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4ca6:	6823      	ldr	r3, [r4, #0]
   d4ca8:	6858      	ldr	r0, [r3, #4]
   d4caa:	f7ff fadf 	bl	d426c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cae:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4cb0:	2300      	movs	r3, #0
   d4cb2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4cb4:	b128      	cbz	r0, d4cc2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4cb6:	f7ff ffcd 	bl	d4c54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cba:	6820      	ldr	r0, [r4, #0]
   d4cbc:	b108      	cbz	r0, d4cc2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4cbe:	f7ff ffc9 	bl	d4c54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	bd10      	pop	{r4, pc}
	...

000d4cc8 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4cc8:	b538      	push	{r3, r4, r5, lr}
   d4cca:	4b0c      	ldr	r3, [pc, #48]	; (d4cfc <_ZN5spark9MeshClassD1Ev+0x34>)
   d4ccc:	6003      	str	r3, [r0, #0]
   d4cce:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cd0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4cd4:	b108      	cbz	r0, d4cda <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4cd6:	f7ff f9e0 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cda:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4cde:	b135      	cbz	r5, d4cee <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ce0:	4628      	mov	r0, r5
   d4ce2:	f7ff ffd2 	bl	d4c8a <_ZN6ThreadD1Ev>
   d4ce6:	2104      	movs	r1, #4
   d4ce8:	4628      	mov	r0, r5
   d4cea:	f000 f9a0 	bl	d502e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cee:	68a0      	ldr	r0, [r4, #8]
   d4cf0:	b108      	cbz	r0, d4cf6 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4cf2:	f7ff ffc5 	bl	d4c80 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	bd38      	pop	{r3, r4, r5, pc}
   d4cfa:	bf00      	nop
   d4cfc:	000d5d44 	.word	0x000d5d44

000d4d00 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4d00:	b538      	push	{r3, r4, r5, lr}
   d4d02:	4c0d      	ldr	r4, [pc, #52]	; (d4d38 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4d04:	4b0d      	ldr	r3, [pc, #52]	; (d4d3c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4d06:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4d08:	2500      	movs	r5, #0
   d4d0a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4d0c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4d10:	6063      	str	r3, [r4, #4]
   d4d12:	60a5      	str	r5, [r4, #8]
   d4d14:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d18:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4d1c:	f7ff fab6 	bl	d428c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4d20:	4b07      	ldr	r3, [pc, #28]	; (d4d40 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4d22:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4d26:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4d28:	4620      	mov	r0, r4
   d4d2a:	4a06      	ldr	r2, [pc, #24]	; (d4d44 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4d2c:	4906      	ldr	r1, [pc, #24]	; (d4d48 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4d32:	f000 b977 	b.w	d5024 <__aeabi_atexit>
   d4d36:	bf00      	nop
   d4d38:	2003e534 	.word	0x2003e534
   d4d3c:	000d5dac 	.word	0x000d5dac
   d4d40:	000d5d44 	.word	0x000d5d44
   d4d44:	2003e3c0 	.word	0x2003e3c0
   d4d48:	000d4cc9 	.word	0x000d4cc9

000d4d4c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4d4c:	2200      	movs	r2, #0
   d4d4e:	4611      	mov	r1, r2
   d4d50:	6840      	ldr	r0, [r0, #4]
   d4d52:	f7ff bbb7 	b.w	d44c4 <network_ready>

000d4d56 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d56:	2200      	movs	r2, #0
   d4d58:	4611      	mov	r1, r2
   d4d5a:	6840      	ldr	r0, [r0, #4]
   d4d5c:	f7ff bbd2 	b.w	d4504 <network_listening>

000d4d60 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d60:	2200      	movs	r2, #0
   d4d62:	4611      	mov	r1, r2
   d4d64:	6840      	ldr	r0, [r0, #4]
   d4d66:	f7ff bbdd 	b.w	d4524 <network_get_listen_timeout>

000d4d6a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d6a:	2200      	movs	r2, #0
   d4d6c:	6840      	ldr	r0, [r0, #4]
   d4d6e:	f7ff bbd1 	b.w	d4514 <network_set_listen_timeout>

000d4d72 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d72:	2200      	movs	r2, #0
   d4d74:	f081 0101 	eor.w	r1, r1, #1
   d4d78:	6840      	ldr	r0, [r0, #4]
   d4d7a:	f7ff bbbb 	b.w	d44f4 <network_listen>

000d4d7e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4d7e:	2300      	movs	r3, #0
   d4d80:	461a      	mov	r2, r3
   d4d82:	4619      	mov	r1, r3
   d4d84:	6840      	ldr	r0, [r0, #4]
   d4d86:	f7ff bbad 	b.w	d44e4 <network_off>

000d4d8a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4d8a:	2300      	movs	r3, #0
   d4d8c:	461a      	mov	r2, r3
   d4d8e:	4619      	mov	r1, r3
   d4d90:	6840      	ldr	r0, [r0, #4]
   d4d92:	f7ff bb9f 	b.w	d44d4 <network_on>

000d4d96 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d96:	2200      	movs	r2, #0
   d4d98:	4611      	mov	r1, r2
   d4d9a:	6840      	ldr	r0, [r0, #4]
   d4d9c:	f7ff bb82 	b.w	d44a4 <network_connecting>

000d4da0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4da0:	2200      	movs	r2, #0
   d4da2:	2102      	movs	r1, #2
   d4da4:	6840      	ldr	r0, [r0, #4]
   d4da6:	f7ff bb85 	b.w	d44b4 <network_disconnect>

000d4daa <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4daa:	2300      	movs	r3, #0
   d4dac:	461a      	mov	r2, r3
   d4dae:	6840      	ldr	r0, [r0, #4]
   d4db0:	f7ff bb70 	b.w	d4494 <network_connect>

000d4db4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4db4:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4db6:	2204      	movs	r2, #4
   d4db8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4dba:	4a02      	ldr	r2, [pc, #8]	; (d4dc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4dbc:	601a      	str	r2, [r3, #0]
   d4dbe:	4770      	bx	lr
   d4dc0:	2003e704 	.word	0x2003e704
   d4dc4:	000d5d78 	.word	0x000d5d78

000d4dc8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4dc8:	2300      	movs	r3, #0
   d4dca:	461a      	mov	r2, r3
   d4dcc:	6840      	ldr	r0, [r0, #4]
   d4dce:	f7ff bb61 	b.w	d4494 <network_connect>

000d4dd2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4dd2:	2200      	movs	r2, #0
   d4dd4:	2102      	movs	r1, #2
   d4dd6:	6840      	ldr	r0, [r0, #4]
   d4dd8:	f7ff bb6c 	b.w	d44b4 <network_disconnect>

000d4ddc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ddc:	2200      	movs	r2, #0
   d4dde:	4611      	mov	r1, r2
   d4de0:	6840      	ldr	r0, [r0, #4]
   d4de2:	f7ff bb5f 	b.w	d44a4 <network_connecting>

000d4de6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4de6:	2200      	movs	r2, #0
   d4de8:	4611      	mov	r1, r2
   d4dea:	6840      	ldr	r0, [r0, #4]
   d4dec:	f7ff bb6a 	b.w	d44c4 <network_ready>

000d4df0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4df0:	2300      	movs	r3, #0
   d4df2:	461a      	mov	r2, r3
   d4df4:	4619      	mov	r1, r3
   d4df6:	6840      	ldr	r0, [r0, #4]
   d4df8:	f7ff bb6c 	b.w	d44d4 <network_on>

000d4dfc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4dfc:	2300      	movs	r3, #0
   d4dfe:	461a      	mov	r2, r3
   d4e00:	4619      	mov	r1, r3
   d4e02:	6840      	ldr	r0, [r0, #4]
   d4e04:	f7ff bb6e 	b.w	d44e4 <network_off>

000d4e08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4e08:	2200      	movs	r2, #0
   d4e0a:	f081 0101 	eor.w	r1, r1, #1
   d4e0e:	6840      	ldr	r0, [r0, #4]
   d4e10:	f7ff bb70 	b.w	d44f4 <network_listen>

000d4e14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4e14:	2200      	movs	r2, #0
   d4e16:	6840      	ldr	r0, [r0, #4]
   d4e18:	f7ff bb7c 	b.w	d4514 <network_set_listen_timeout>

000d4e1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4e1c:	2200      	movs	r2, #0
   d4e1e:	4611      	mov	r1, r2
   d4e20:	6840      	ldr	r0, [r0, #4]
   d4e22:	f7ff bb7f 	b.w	d4524 <network_get_listen_timeout>

000d4e26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4e26:	2200      	movs	r2, #0
   d4e28:	4611      	mov	r1, r2
   d4e2a:	6840      	ldr	r0, [r0, #4]
   d4e2c:	f7ff bb6a 	b.w	d4504 <network_listening>

000d4e30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e34:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e36:	b095      	sub	sp, #84	; 0x54
   d4e38:	4616      	mov	r6, r2
   d4e3a:	460d      	mov	r5, r1
   d4e3c:	4607      	mov	r7, r0
    IPAddress addr;
   d4e3e:	f7ff fd55 	bl	d48ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4e42:	4621      	mov	r1, r4
   d4e44:	2220      	movs	r2, #32
   d4e46:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e48:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4e4a:	f000 fe3e 	bl	d5aca <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4e4e:	2340      	movs	r3, #64	; 0x40
   d4e50:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4e52:	4621      	mov	r1, r4
   d4e54:	466b      	mov	r3, sp
   d4e56:	aa0c      	add	r2, sp, #48	; 0x30
   d4e58:	4630      	mov	r0, r6
   d4e5a:	f7ff f9a7 	bl	d41ac <netdb_getaddrinfo>
    if (!r) {
   d4e5e:	4604      	mov	r4, r0
   d4e60:	2800      	cmp	r0, #0
   d4e62:	d144      	bne.n	d4eee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e64:	4602      	mov	r2, r0
   d4e66:	2101      	movs	r1, #1
   d4e68:	6868      	ldr	r0, [r5, #4]
   d4e6a:	f7ff fb2b 	bl	d44c4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e6e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e70:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e72:	4622      	mov	r2, r4
   d4e74:	6868      	ldr	r0, [r5, #4]
   d4e76:	f7ff fb25 	bl	d44c4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e7a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e7c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4e7e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e80:	2e00      	cmp	r6, #0
   d4e82:	d034      	beq.n	d4eee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4e84:	2900      	cmp	r1, #0
   d4e86:	d132      	bne.n	d4eee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4e88:	6873      	ldr	r3, [r6, #4]
   d4e8a:	2b02      	cmp	r3, #2
   d4e8c:	d002      	beq.n	d4e94 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4e8e:	2b0a      	cmp	r3, #10
   d4e90:	d009      	beq.n	d4ea6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4e92:	e02a      	b.n	d4eea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4e94:	f1b8 0f00 	cmp.w	r8, #0
   d4e98:	d027      	beq.n	d4eea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e9a:	6971      	ldr	r1, [r6, #20]
   d4e9c:	4638      	mov	r0, r7
   d4e9e:	3104      	adds	r1, #4
   d4ea0:	f7ff fd51 	bl	d4946 <_ZN9IPAddressaSEPKh>
   d4ea4:	e020      	b.n	d4ee8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4ea6:	f1b9 0f00 	cmp.w	r9, #0
   d4eaa:	d01e      	beq.n	d4eea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4eac:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4eae:	2211      	movs	r2, #17
   d4eb0:	a801      	add	r0, sp, #4
   d4eb2:	f000 fe0a 	bl	d5aca <memset>
                    a.v = 6;
   d4eb6:	2306      	movs	r3, #6
   d4eb8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4ebc:	ad01      	add	r5, sp, #4
   d4ebe:	f104 0308 	add.w	r3, r4, #8
   d4ec2:	3418      	adds	r4, #24
   d4ec4:	6818      	ldr	r0, [r3, #0]
   d4ec6:	6859      	ldr	r1, [r3, #4]
   d4ec8:	462a      	mov	r2, r5
   d4eca:	c203      	stmia	r2!, {r0, r1}
   d4ecc:	3308      	adds	r3, #8
   d4ece:	42a3      	cmp	r3, r4
   d4ed0:	4615      	mov	r5, r2
   d4ed2:	d1f7      	bne.n	d4ec4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4ed4:	a901      	add	r1, sp, #4
   d4ed6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4ed8:	ad07      	add	r5, sp, #28
   d4eda:	f7ff fd15 	bl	d4908 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ee0:	1d3c      	adds	r4, r7, #4
   d4ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ee4:	682b      	ldr	r3, [r5, #0]
   d4ee6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4ee8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4eea:	69f6      	ldr	r6, [r6, #28]
   d4eec:	e7c8      	b.n	d4e80 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4eee:	9800      	ldr	r0, [sp, #0]
   d4ef0:	f7ff f954 	bl	d419c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4ef4:	4638      	mov	r0, r7
   d4ef6:	b015      	add	sp, #84	; 0x54
   d4ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4efc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4efc:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4efe:	4a03      	ldr	r2, [pc, #12]	; (d4f0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4f00:	601a      	str	r2, [r3, #0]
   d4f02:	2200      	movs	r2, #0
   d4f04:	605a      	str	r2, [r3, #4]
   d4f06:	4770      	bx	lr
   d4f08:	2003e70c 	.word	0x2003e70c
   d4f0c:	000d5dac 	.word	0x000d5dac

000d4f10 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d4f10:	b510      	push	{r4, lr}
   d4f12:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d4f14:	480f      	ldr	r0, [pc, #60]	; (d4f54 <pinAvailable+0x44>)
   d4f16:	f7ff fb7f 	bl	d4618 <_ZN8SPIClass9isEnabledEv>
   d4f1a:	b128      	cbz	r0, d4f28 <pinAvailable+0x18>
   d4f1c:	f1a4 030b 	sub.w	r3, r4, #11
   d4f20:	2b02      	cmp	r3, #2
   d4f22:	d801      	bhi.n	d4f28 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d4f24:	2000      	movs	r0, #0
   d4f26:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d4f28:	f000 f85c 	bl	d4fe4 <_Z19__fetch_global_Wirev>
   d4f2c:	f7ff fe5a 	bl	d4be4 <_ZN7TwoWire9isEnabledEv>
   d4f30:	b108      	cbz	r0, d4f36 <pinAvailable+0x26>
   d4f32:	2c01      	cmp	r4, #1
   d4f34:	d9f6      	bls.n	d4f24 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d4f36:	f7ff fdf1 	bl	d4b1c <_Z22__fetch_global_Serial1v>
   d4f3a:	f7ff fdeb 	bl	d4b14 <_ZN11USARTSerial9isEnabledEv>
   d4f3e:	b118      	cbz	r0, d4f48 <pinAvailable+0x38>
   d4f40:	f1a4 0309 	sub.w	r3, r4, #9
   d4f44:	2b01      	cmp	r3, #1
   d4f46:	d9ed      	bls.n	d4f24 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d4f48:	2c23      	cmp	r4, #35	; 0x23
   d4f4a:	bf8c      	ite	hi
   d4f4c:	2000      	movhi	r0, #0
   d4f4e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d4f50:	bd10      	pop	{r4, pc}
   d4f52:	bf00      	nop
   d4f54:	2003e714 	.word	0x2003e714

000d4f58 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4f58:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d4f5a:	b538      	push	{r3, r4, r5, lr}
   d4f5c:	4604      	mov	r4, r0
   d4f5e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4f60:	d80a      	bhi.n	d4f78 <pinMode+0x20>
   d4f62:	29ff      	cmp	r1, #255	; 0xff
   d4f64:	d008      	beq.n	d4f78 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d4f66:	f7ff ffd3 	bl	d4f10 <pinAvailable>
   d4f6a:	b128      	cbz	r0, d4f78 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d4f6c:	4629      	mov	r1, r5
   d4f6e:	4620      	mov	r0, r4
}
   d4f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d4f74:	f7ff b92a 	b.w	d41cc <HAL_Pin_Mode>
   d4f78:	bd38      	pop	{r3, r4, r5, pc}

000d4f7a <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d4f7a:	b510      	push	{r4, lr}
   d4f7c:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d4f7e:	f7ff f92d 	bl	d41dc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d4f82:	3804      	subs	r0, #4
   d4f84:	b2c0      	uxtb	r0, r0
   d4f86:	2801      	cmp	r0, #1
   d4f88:	d908      	bls.n	d4f9c <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d4f8a:	4620      	mov	r0, r4
   d4f8c:	f7ff ffc0 	bl	d4f10 <pinAvailable>
   d4f90:	b120      	cbz	r0, d4f9c <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d4f92:	4620      	mov	r0, r4
}
   d4f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d4f98:	f7ff b928 	b.w	d41ec <HAL_GPIO_Read>
}
   d4f9c:	2000      	movs	r0, #0
   d4f9e:	bd10      	pop	{r4, pc}

000d4fa0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4fa0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4fa2:	4c0c      	ldr	r4, [pc, #48]	; (d4fd4 <_GLOBAL__sub_I_SPI+0x34>)
   d4fa4:	4e0c      	ldr	r6, [pc, #48]	; (d4fd8 <_GLOBAL__sub_I_SPI+0x38>)
   d4fa6:	4d0d      	ldr	r5, [pc, #52]	; (d4fdc <_GLOBAL__sub_I_SPI+0x3c>)
   d4fa8:	2100      	movs	r1, #0
   d4faa:	4620      	mov	r0, r4
   d4fac:	f7ff fb20 	bl	d45f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4fb0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4fb2:	4c0b      	ldr	r4, [pc, #44]	; (d4fe0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4fb4:	4632      	mov	r2, r6
   d4fb6:	4629      	mov	r1, r5
   d4fb8:	f000 f834 	bl	d5024 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4fbc:	2101      	movs	r1, #1
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	f7ff fb16 	bl	d45f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4fc4:	4632      	mov	r2, r6
   d4fc6:	4629      	mov	r1, r5
   d4fc8:	4620      	mov	r0, r4
   d4fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4fce:	f000 b829 	b.w	d5024 <__aeabi_atexit>
   d4fd2:	bf00      	nop
   d4fd4:	2003e714 	.word	0x2003e714
   d4fd8:	2003e3c0 	.word	0x2003e3c0
   d4fdc:	000d45e1 	.word	0x000d45e1
   d4fe0:	2003e724 	.word	0x2003e724

000d4fe4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d4fe4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d4fe6:	4d0b      	ldr	r5, [pc, #44]	; (d5014 <_Z19__fetch_global_Wirev+0x30>)
   d4fe8:	6829      	ldr	r1, [r5, #0]
   d4fea:	f011 0401 	ands.w	r4, r1, #1
   d4fee:	d10f      	bne.n	d5010 <_Z19__fetch_global_Wirev+0x2c>
   d4ff0:	4628      	mov	r0, r5
   d4ff2:	f7ff f854 	bl	d409e <__cxa_guard_acquire>
   d4ff6:	b158      	cbz	r0, d5010 <_Z19__fetch_global_Wirev+0x2c>
   d4ff8:	4621      	mov	r1, r4
   d4ffa:	4807      	ldr	r0, [pc, #28]	; (d5018 <_Z19__fetch_global_Wirev+0x34>)
   d4ffc:	f7ff fde0 	bl	d4bc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5000:	4628      	mov	r0, r5
   d5002:	f7ff f851 	bl	d40a8 <__cxa_guard_release>
   d5006:	4a05      	ldr	r2, [pc, #20]	; (d501c <_Z19__fetch_global_Wirev+0x38>)
   d5008:	4905      	ldr	r1, [pc, #20]	; (d5020 <_Z19__fetch_global_Wirev+0x3c>)
   d500a:	4803      	ldr	r0, [pc, #12]	; (d5018 <_Z19__fetch_global_Wirev+0x34>)
   d500c:	f000 f80a 	bl	d5024 <__aeabi_atexit>
	return wire;
}
   d5010:	4801      	ldr	r0, [pc, #4]	; (d5018 <_Z19__fetch_global_Wirev+0x34>)
   d5012:	bd38      	pop	{r3, r4, r5, pc}
   d5014:	2003e738 	.word	0x2003e738
   d5018:	2003e73c 	.word	0x2003e73c
   d501c:	2003e3c0 	.word	0x2003e3c0
   d5020:	000d4b69 	.word	0x000d4b69

000d5024 <__aeabi_atexit>:
   d5024:	460b      	mov	r3, r1
   d5026:	4601      	mov	r1, r0
   d5028:	4618      	mov	r0, r3
   d502a:	f000 bd35 	b.w	d5a98 <__cxa_atexit>

000d502e <_ZdlPvj>:
   d502e:	f7ff b832 	b.w	d4096 <_ZdlPv>
	...

000d5034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5034:	4b18      	ldr	r3, [pc, #96]	; (d5098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5036:	681a      	ldr	r2, [r3, #0]
   d5038:	07d1      	lsls	r1, r2, #31
   d503a:	bf5c      	itt	pl
   d503c:	2201      	movpl	r2, #1
   d503e:	601a      	strpl	r2, [r3, #0]
   d5040:	4b16      	ldr	r3, [pc, #88]	; (d509c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5042:	681a      	ldr	r2, [r3, #0]
   d5044:	07d2      	lsls	r2, r2, #31
   d5046:	bf5c      	itt	pl
   d5048:	2201      	movpl	r2, #1
   d504a:	601a      	strpl	r2, [r3, #0]
   d504c:	4b14      	ldr	r3, [pc, #80]	; (d50a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d504e:	681a      	ldr	r2, [r3, #0]
   d5050:	07d0      	lsls	r0, r2, #31
   d5052:	bf5c      	itt	pl
   d5054:	2201      	movpl	r2, #1
   d5056:	601a      	strpl	r2, [r3, #0]
   d5058:	4b12      	ldr	r3, [pc, #72]	; (d50a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d505a:	681a      	ldr	r2, [r3, #0]
   d505c:	07d1      	lsls	r1, r2, #31
   d505e:	bf5c      	itt	pl
   d5060:	2201      	movpl	r2, #1
   d5062:	601a      	strpl	r2, [r3, #0]
   d5064:	4b10      	ldr	r3, [pc, #64]	; (d50a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5066:	681a      	ldr	r2, [r3, #0]
   d5068:	07d2      	lsls	r2, r2, #31
   d506a:	bf5c      	itt	pl
   d506c:	2201      	movpl	r2, #1
   d506e:	601a      	strpl	r2, [r3, #0]
   d5070:	4b0e      	ldr	r3, [pc, #56]	; (d50ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5072:	681a      	ldr	r2, [r3, #0]
   d5074:	07d0      	lsls	r0, r2, #31
   d5076:	bf5c      	itt	pl
   d5078:	2201      	movpl	r2, #1
   d507a:	601a      	strpl	r2, [r3, #0]
   d507c:	4b0c      	ldr	r3, [pc, #48]	; (d50b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d507e:	681a      	ldr	r2, [r3, #0]
   d5080:	07d1      	lsls	r1, r2, #31
   d5082:	bf5c      	itt	pl
   d5084:	2201      	movpl	r2, #1
   d5086:	601a      	strpl	r2, [r3, #0]
   d5088:	4b0a      	ldr	r3, [pc, #40]	; (d50b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d508a:	681a      	ldr	r2, [r3, #0]
   d508c:	07d2      	lsls	r2, r2, #31
   d508e:	bf5c      	itt	pl
   d5090:	2201      	movpl	r2, #1
   d5092:	601a      	strpl	r2, [r3, #0]
   d5094:	4770      	bx	lr
   d5096:	bf00      	nop
   d5098:	2003e76c 	.word	0x2003e76c
   d509c:	2003e768 	.word	0x2003e768
   d50a0:	2003e764 	.word	0x2003e764
   d50a4:	2003e760 	.word	0x2003e760
   d50a8:	2003e75c 	.word	0x2003e75c
   d50ac:	2003e758 	.word	0x2003e758
   d50b0:	2003e754 	.word	0x2003e754
   d50b4:	2003e750 	.word	0x2003e750

000d50b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d50b8:	4b24      	ldr	r3, [pc, #144]	; (d514c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d50ba:	681a      	ldr	r2, [r3, #0]
   d50bc:	07d0      	lsls	r0, r2, #31
   d50be:	bf5c      	itt	pl
   d50c0:	2201      	movpl	r2, #1
   d50c2:	601a      	strpl	r2, [r3, #0]
   d50c4:	4b22      	ldr	r3, [pc, #136]	; (d5150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d50c6:	681a      	ldr	r2, [r3, #0]
   d50c8:	07d1      	lsls	r1, r2, #31
   d50ca:	bf5c      	itt	pl
   d50cc:	2201      	movpl	r2, #1
   d50ce:	601a      	strpl	r2, [r3, #0]
   d50d0:	4b20      	ldr	r3, [pc, #128]	; (d5154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d50d2:	681a      	ldr	r2, [r3, #0]
   d50d4:	07d2      	lsls	r2, r2, #31
   d50d6:	bf5c      	itt	pl
   d50d8:	2201      	movpl	r2, #1
   d50da:	601a      	strpl	r2, [r3, #0]
   d50dc:	4b1e      	ldr	r3, [pc, #120]	; (d5158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d50de:	681a      	ldr	r2, [r3, #0]
   d50e0:	07d0      	lsls	r0, r2, #31
   d50e2:	bf5c      	itt	pl
   d50e4:	2201      	movpl	r2, #1
   d50e6:	601a      	strpl	r2, [r3, #0]
   d50e8:	4b1c      	ldr	r3, [pc, #112]	; (d515c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d50ea:	681a      	ldr	r2, [r3, #0]
   d50ec:	07d1      	lsls	r1, r2, #31
   d50ee:	bf5c      	itt	pl
   d50f0:	2201      	movpl	r2, #1
   d50f2:	601a      	strpl	r2, [r3, #0]
   d50f4:	4b1a      	ldr	r3, [pc, #104]	; (d5160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d50f6:	681a      	ldr	r2, [r3, #0]
   d50f8:	07d2      	lsls	r2, r2, #31
   d50fa:	bf5c      	itt	pl
   d50fc:	2201      	movpl	r2, #1
   d50fe:	601a      	strpl	r2, [r3, #0]
   d5100:	4b18      	ldr	r3, [pc, #96]	; (d5164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5102:	681a      	ldr	r2, [r3, #0]
   d5104:	07d0      	lsls	r0, r2, #31
   d5106:	bf5c      	itt	pl
   d5108:	2201      	movpl	r2, #1
   d510a:	601a      	strpl	r2, [r3, #0]
   d510c:	4b16      	ldr	r3, [pc, #88]	; (d5168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d510e:	681a      	ldr	r2, [r3, #0]
   d5110:	07d1      	lsls	r1, r2, #31
   d5112:	bf5c      	itt	pl
   d5114:	2201      	movpl	r2, #1
   d5116:	601a      	strpl	r2, [r3, #0]
   d5118:	4b14      	ldr	r3, [pc, #80]	; (d516c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d511a:	681a      	ldr	r2, [r3, #0]
   d511c:	07d2      	lsls	r2, r2, #31
   d511e:	bf5c      	itt	pl
   d5120:	2201      	movpl	r2, #1
   d5122:	601a      	strpl	r2, [r3, #0]
   d5124:	4b12      	ldr	r3, [pc, #72]	; (d5170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5126:	681a      	ldr	r2, [r3, #0]
   d5128:	07d0      	lsls	r0, r2, #31
   d512a:	bf5c      	itt	pl
   d512c:	2201      	movpl	r2, #1
   d512e:	601a      	strpl	r2, [r3, #0]
   d5130:	4b10      	ldr	r3, [pc, #64]	; (d5174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5132:	681a      	ldr	r2, [r3, #0]
   d5134:	07d1      	lsls	r1, r2, #31
   d5136:	bf5c      	itt	pl
   d5138:	2201      	movpl	r2, #1
   d513a:	601a      	strpl	r2, [r3, #0]
   d513c:	4b0e      	ldr	r3, [pc, #56]	; (d5178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d513e:	681a      	ldr	r2, [r3, #0]
   d5140:	07d2      	lsls	r2, r2, #31
   d5142:	bf5c      	itt	pl
   d5144:	2201      	movpl	r2, #1
   d5146:	601a      	strpl	r2, [r3, #0]
   d5148:	4770      	bx	lr
   d514a:	bf00      	nop
   d514c:	2003e79c 	.word	0x2003e79c
   d5150:	2003e798 	.word	0x2003e798
   d5154:	2003e794 	.word	0x2003e794
   d5158:	2003e790 	.word	0x2003e790
   d515c:	2003e78c 	.word	0x2003e78c
   d5160:	2003e788 	.word	0x2003e788
   d5164:	2003e784 	.word	0x2003e784
   d5168:	2003e780 	.word	0x2003e780
   d516c:	2003e77c 	.word	0x2003e77c
   d5170:	2003e778 	.word	0x2003e778
   d5174:	2003e774 	.word	0x2003e774
   d5178:	2003e770 	.word	0x2003e770

000d517c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d517c:	4b24      	ldr	r3, [pc, #144]	; (d5210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d517e:	681a      	ldr	r2, [r3, #0]
   d5180:	07d0      	lsls	r0, r2, #31
   d5182:	bf5c      	itt	pl
   d5184:	2201      	movpl	r2, #1
   d5186:	601a      	strpl	r2, [r3, #0]
   d5188:	4b22      	ldr	r3, [pc, #136]	; (d5214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d518a:	681a      	ldr	r2, [r3, #0]
   d518c:	07d1      	lsls	r1, r2, #31
   d518e:	bf5c      	itt	pl
   d5190:	2201      	movpl	r2, #1
   d5192:	601a      	strpl	r2, [r3, #0]
   d5194:	4b20      	ldr	r3, [pc, #128]	; (d5218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5196:	681a      	ldr	r2, [r3, #0]
   d5198:	07d2      	lsls	r2, r2, #31
   d519a:	bf5c      	itt	pl
   d519c:	2201      	movpl	r2, #1
   d519e:	601a      	strpl	r2, [r3, #0]
   d51a0:	4b1e      	ldr	r3, [pc, #120]	; (d521c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d51a2:	681a      	ldr	r2, [r3, #0]
   d51a4:	07d0      	lsls	r0, r2, #31
   d51a6:	bf5c      	itt	pl
   d51a8:	2201      	movpl	r2, #1
   d51aa:	601a      	strpl	r2, [r3, #0]
   d51ac:	4b1c      	ldr	r3, [pc, #112]	; (d5220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d51ae:	681a      	ldr	r2, [r3, #0]
   d51b0:	07d1      	lsls	r1, r2, #31
   d51b2:	bf5c      	itt	pl
   d51b4:	2201      	movpl	r2, #1
   d51b6:	601a      	strpl	r2, [r3, #0]
   d51b8:	4b1a      	ldr	r3, [pc, #104]	; (d5224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d51ba:	681a      	ldr	r2, [r3, #0]
   d51bc:	07d2      	lsls	r2, r2, #31
   d51be:	bf5c      	itt	pl
   d51c0:	2201      	movpl	r2, #1
   d51c2:	601a      	strpl	r2, [r3, #0]
   d51c4:	4b18      	ldr	r3, [pc, #96]	; (d5228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d51c6:	681a      	ldr	r2, [r3, #0]
   d51c8:	07d0      	lsls	r0, r2, #31
   d51ca:	bf5c      	itt	pl
   d51cc:	2201      	movpl	r2, #1
   d51ce:	601a      	strpl	r2, [r3, #0]
   d51d0:	4b16      	ldr	r3, [pc, #88]	; (d522c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d51d2:	681a      	ldr	r2, [r3, #0]
   d51d4:	07d1      	lsls	r1, r2, #31
   d51d6:	bf5c      	itt	pl
   d51d8:	2201      	movpl	r2, #1
   d51da:	601a      	strpl	r2, [r3, #0]
   d51dc:	4b14      	ldr	r3, [pc, #80]	; (d5230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d51de:	681a      	ldr	r2, [r3, #0]
   d51e0:	07d2      	lsls	r2, r2, #31
   d51e2:	bf5c      	itt	pl
   d51e4:	2201      	movpl	r2, #1
   d51e6:	601a      	strpl	r2, [r3, #0]
   d51e8:	4b12      	ldr	r3, [pc, #72]	; (d5234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d51ea:	681a      	ldr	r2, [r3, #0]
   d51ec:	07d0      	lsls	r0, r2, #31
   d51ee:	bf5c      	itt	pl
   d51f0:	2201      	movpl	r2, #1
   d51f2:	601a      	strpl	r2, [r3, #0]
   d51f4:	4b10      	ldr	r3, [pc, #64]	; (d5238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d51f6:	681a      	ldr	r2, [r3, #0]
   d51f8:	07d1      	lsls	r1, r2, #31
   d51fa:	bf5c      	itt	pl
   d51fc:	2201      	movpl	r2, #1
   d51fe:	601a      	strpl	r2, [r3, #0]
   d5200:	4b0e      	ldr	r3, [pc, #56]	; (d523c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5202:	681a      	ldr	r2, [r3, #0]
   d5204:	07d2      	lsls	r2, r2, #31
   d5206:	bf5c      	itt	pl
   d5208:	2201      	movpl	r2, #1
   d520a:	601a      	strpl	r2, [r3, #0]
   d520c:	4770      	bx	lr
   d520e:	bf00      	nop
   d5210:	2003e7cc 	.word	0x2003e7cc
   d5214:	2003e7c8 	.word	0x2003e7c8
   d5218:	2003e7c4 	.word	0x2003e7c4
   d521c:	2003e7c0 	.word	0x2003e7c0
   d5220:	2003e7bc 	.word	0x2003e7bc
   d5224:	2003e7b8 	.word	0x2003e7b8
   d5228:	2003e7b4 	.word	0x2003e7b4
   d522c:	2003e7b0 	.word	0x2003e7b0
   d5230:	2003e7ac 	.word	0x2003e7ac
   d5234:	2003e7a8 	.word	0x2003e7a8
   d5238:	2003e7a4 	.word	0x2003e7a4
   d523c:	2003e7a0 	.word	0x2003e7a0

000d5240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5240:	4b18      	ldr	r3, [pc, #96]	; (d52a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5242:	681a      	ldr	r2, [r3, #0]
   d5244:	07d1      	lsls	r1, r2, #31
   d5246:	bf5c      	itt	pl
   d5248:	2201      	movpl	r2, #1
   d524a:	601a      	strpl	r2, [r3, #0]
   d524c:	4b16      	ldr	r3, [pc, #88]	; (d52a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d524e:	681a      	ldr	r2, [r3, #0]
   d5250:	07d2      	lsls	r2, r2, #31
   d5252:	bf5c      	itt	pl
   d5254:	2201      	movpl	r2, #1
   d5256:	601a      	strpl	r2, [r3, #0]
   d5258:	4b14      	ldr	r3, [pc, #80]	; (d52ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d525a:	681a      	ldr	r2, [r3, #0]
   d525c:	07d0      	lsls	r0, r2, #31
   d525e:	bf5c      	itt	pl
   d5260:	2201      	movpl	r2, #1
   d5262:	601a      	strpl	r2, [r3, #0]
   d5264:	4b12      	ldr	r3, [pc, #72]	; (d52b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5266:	681a      	ldr	r2, [r3, #0]
   d5268:	07d1      	lsls	r1, r2, #31
   d526a:	bf5c      	itt	pl
   d526c:	2201      	movpl	r2, #1
   d526e:	601a      	strpl	r2, [r3, #0]
   d5270:	4b10      	ldr	r3, [pc, #64]	; (d52b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5272:	681a      	ldr	r2, [r3, #0]
   d5274:	07d2      	lsls	r2, r2, #31
   d5276:	bf5c      	itt	pl
   d5278:	2201      	movpl	r2, #1
   d527a:	601a      	strpl	r2, [r3, #0]
   d527c:	4b0e      	ldr	r3, [pc, #56]	; (d52b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d527e:	681a      	ldr	r2, [r3, #0]
   d5280:	07d0      	lsls	r0, r2, #31
   d5282:	bf5c      	itt	pl
   d5284:	2201      	movpl	r2, #1
   d5286:	601a      	strpl	r2, [r3, #0]
   d5288:	4b0c      	ldr	r3, [pc, #48]	; (d52bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d528a:	681a      	ldr	r2, [r3, #0]
   d528c:	07d1      	lsls	r1, r2, #31
   d528e:	bf5c      	itt	pl
   d5290:	2201      	movpl	r2, #1
   d5292:	601a      	strpl	r2, [r3, #0]
   d5294:	4b0a      	ldr	r3, [pc, #40]	; (d52c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5296:	681a      	ldr	r2, [r3, #0]
   d5298:	07d2      	lsls	r2, r2, #31
   d529a:	bf5c      	itt	pl
   d529c:	2201      	movpl	r2, #1
   d529e:	601a      	strpl	r2, [r3, #0]
   d52a0:	4770      	bx	lr
   d52a2:	bf00      	nop
   d52a4:	2003e7ec 	.word	0x2003e7ec
   d52a8:	2003e7e8 	.word	0x2003e7e8
   d52ac:	2003e7e4 	.word	0x2003e7e4
   d52b0:	2003e7e0 	.word	0x2003e7e0
   d52b4:	2003e7dc 	.word	0x2003e7dc
   d52b8:	2003e7d8 	.word	0x2003e7d8
   d52bc:	2003e7d4 	.word	0x2003e7d4
   d52c0:	2003e7d0 	.word	0x2003e7d0

000d52c4 <__aeabi_drsub>:
   d52c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d52c8:	e002      	b.n	d52d0 <__adddf3>
   d52ca:	bf00      	nop

000d52cc <__aeabi_dsub>:
   d52cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d52d0 <__adddf3>:
   d52d0:	b530      	push	{r4, r5, lr}
   d52d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d52d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d52da:	ea94 0f05 	teq	r4, r5
   d52de:	bf08      	it	eq
   d52e0:	ea90 0f02 	teqeq	r0, r2
   d52e4:	bf1f      	itttt	ne
   d52e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d52ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   d52ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d52f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d52f6:	f000 80e2 	beq.w	d54be <__adddf3+0x1ee>
   d52fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d52fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5302:	bfb8      	it	lt
   d5304:	426d      	neglt	r5, r5
   d5306:	dd0c      	ble.n	d5322 <__adddf3+0x52>
   d5308:	442c      	add	r4, r5
   d530a:	ea80 0202 	eor.w	r2, r0, r2
   d530e:	ea81 0303 	eor.w	r3, r1, r3
   d5312:	ea82 0000 	eor.w	r0, r2, r0
   d5316:	ea83 0101 	eor.w	r1, r3, r1
   d531a:	ea80 0202 	eor.w	r2, r0, r2
   d531e:	ea81 0303 	eor.w	r3, r1, r3
   d5322:	2d36      	cmp	r5, #54	; 0x36
   d5324:	bf88      	it	hi
   d5326:	bd30      	pophi	{r4, r5, pc}
   d5328:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d532c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5330:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5338:	d002      	beq.n	d5340 <__adddf3+0x70>
   d533a:	4240      	negs	r0, r0
   d533c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5340:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5344:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d534c:	d002      	beq.n	d5354 <__adddf3+0x84>
   d534e:	4252      	negs	r2, r2
   d5350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5354:	ea94 0f05 	teq	r4, r5
   d5358:	f000 80a7 	beq.w	d54aa <__adddf3+0x1da>
   d535c:	f1a4 0401 	sub.w	r4, r4, #1
   d5360:	f1d5 0e20 	rsbs	lr, r5, #32
   d5364:	db0d      	blt.n	d5382 <__adddf3+0xb2>
   d5366:	fa02 fc0e 	lsl.w	ip, r2, lr
   d536a:	fa22 f205 	lsr.w	r2, r2, r5
   d536e:	1880      	adds	r0, r0, r2
   d5370:	f141 0100 	adc.w	r1, r1, #0
   d5374:	fa03 f20e 	lsl.w	r2, r3, lr
   d5378:	1880      	adds	r0, r0, r2
   d537a:	fa43 f305 	asr.w	r3, r3, r5
   d537e:	4159      	adcs	r1, r3
   d5380:	e00e      	b.n	d53a0 <__adddf3+0xd0>
   d5382:	f1a5 0520 	sub.w	r5, r5, #32
   d5386:	f10e 0e20 	add.w	lr, lr, #32
   d538a:	2a01      	cmp	r2, #1
   d538c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5390:	bf28      	it	cs
   d5392:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5396:	fa43 f305 	asr.w	r3, r3, r5
   d539a:	18c0      	adds	r0, r0, r3
   d539c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d53a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d53a4:	d507      	bpl.n	d53b6 <__adddf3+0xe6>
   d53a6:	f04f 0e00 	mov.w	lr, #0
   d53aa:	f1dc 0c00 	rsbs	ip, ip, #0
   d53ae:	eb7e 0000 	sbcs.w	r0, lr, r0
   d53b2:	eb6e 0101 	sbc.w	r1, lr, r1
   d53b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d53ba:	d31b      	bcc.n	d53f4 <__adddf3+0x124>
   d53bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d53c0:	d30c      	bcc.n	d53dc <__adddf3+0x10c>
   d53c2:	0849      	lsrs	r1, r1, #1
   d53c4:	ea5f 0030 	movs.w	r0, r0, rrx
   d53c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d53cc:	f104 0401 	add.w	r4, r4, #1
   d53d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d53d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d53d8:	f080 809a 	bcs.w	d5510 <__adddf3+0x240>
   d53dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d53e0:	bf08      	it	eq
   d53e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d53e6:	f150 0000 	adcs.w	r0, r0, #0
   d53ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d53ee:	ea41 0105 	orr.w	r1, r1, r5
   d53f2:	bd30      	pop	{r4, r5, pc}
   d53f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d53f8:	4140      	adcs	r0, r0
   d53fa:	eb41 0101 	adc.w	r1, r1, r1
   d53fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5402:	f1a4 0401 	sub.w	r4, r4, #1
   d5406:	d1e9      	bne.n	d53dc <__adddf3+0x10c>
   d5408:	f091 0f00 	teq	r1, #0
   d540c:	bf04      	itt	eq
   d540e:	4601      	moveq	r1, r0
   d5410:	2000      	moveq	r0, #0
   d5412:	fab1 f381 	clz	r3, r1
   d5416:	bf08      	it	eq
   d5418:	3320      	addeq	r3, #32
   d541a:	f1a3 030b 	sub.w	r3, r3, #11
   d541e:	f1b3 0220 	subs.w	r2, r3, #32
   d5422:	da0c      	bge.n	d543e <__adddf3+0x16e>
   d5424:	320c      	adds	r2, #12
   d5426:	dd08      	ble.n	d543a <__adddf3+0x16a>
   d5428:	f102 0c14 	add.w	ip, r2, #20
   d542c:	f1c2 020c 	rsb	r2, r2, #12
   d5430:	fa01 f00c 	lsl.w	r0, r1, ip
   d5434:	fa21 f102 	lsr.w	r1, r1, r2
   d5438:	e00c      	b.n	d5454 <__adddf3+0x184>
   d543a:	f102 0214 	add.w	r2, r2, #20
   d543e:	bfd8      	it	le
   d5440:	f1c2 0c20 	rsble	ip, r2, #32
   d5444:	fa01 f102 	lsl.w	r1, r1, r2
   d5448:	fa20 fc0c 	lsr.w	ip, r0, ip
   d544c:	bfdc      	itt	le
   d544e:	ea41 010c 	orrle.w	r1, r1, ip
   d5452:	4090      	lslle	r0, r2
   d5454:	1ae4      	subs	r4, r4, r3
   d5456:	bfa2      	ittt	ge
   d5458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d545c:	4329      	orrge	r1, r5
   d545e:	bd30      	popge	{r4, r5, pc}
   d5460:	ea6f 0404 	mvn.w	r4, r4
   d5464:	3c1f      	subs	r4, #31
   d5466:	da1c      	bge.n	d54a2 <__adddf3+0x1d2>
   d5468:	340c      	adds	r4, #12
   d546a:	dc0e      	bgt.n	d548a <__adddf3+0x1ba>
   d546c:	f104 0414 	add.w	r4, r4, #20
   d5470:	f1c4 0220 	rsb	r2, r4, #32
   d5474:	fa20 f004 	lsr.w	r0, r0, r4
   d5478:	fa01 f302 	lsl.w	r3, r1, r2
   d547c:	ea40 0003 	orr.w	r0, r0, r3
   d5480:	fa21 f304 	lsr.w	r3, r1, r4
   d5484:	ea45 0103 	orr.w	r1, r5, r3
   d5488:	bd30      	pop	{r4, r5, pc}
   d548a:	f1c4 040c 	rsb	r4, r4, #12
   d548e:	f1c4 0220 	rsb	r2, r4, #32
   d5492:	fa20 f002 	lsr.w	r0, r0, r2
   d5496:	fa01 f304 	lsl.w	r3, r1, r4
   d549a:	ea40 0003 	orr.w	r0, r0, r3
   d549e:	4629      	mov	r1, r5
   d54a0:	bd30      	pop	{r4, r5, pc}
   d54a2:	fa21 f004 	lsr.w	r0, r1, r4
   d54a6:	4629      	mov	r1, r5
   d54a8:	bd30      	pop	{r4, r5, pc}
   d54aa:	f094 0f00 	teq	r4, #0
   d54ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d54b2:	bf06      	itte	eq
   d54b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d54b8:	3401      	addeq	r4, #1
   d54ba:	3d01      	subne	r5, #1
   d54bc:	e74e      	b.n	d535c <__adddf3+0x8c>
   d54be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d54c2:	bf18      	it	ne
   d54c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d54c8:	d029      	beq.n	d551e <__adddf3+0x24e>
   d54ca:	ea94 0f05 	teq	r4, r5
   d54ce:	bf08      	it	eq
   d54d0:	ea90 0f02 	teqeq	r0, r2
   d54d4:	d005      	beq.n	d54e2 <__adddf3+0x212>
   d54d6:	ea54 0c00 	orrs.w	ip, r4, r0
   d54da:	bf04      	itt	eq
   d54dc:	4619      	moveq	r1, r3
   d54de:	4610      	moveq	r0, r2
   d54e0:	bd30      	pop	{r4, r5, pc}
   d54e2:	ea91 0f03 	teq	r1, r3
   d54e6:	bf1e      	ittt	ne
   d54e8:	2100      	movne	r1, #0
   d54ea:	2000      	movne	r0, #0
   d54ec:	bd30      	popne	{r4, r5, pc}
   d54ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d54f2:	d105      	bne.n	d5500 <__adddf3+0x230>
   d54f4:	0040      	lsls	r0, r0, #1
   d54f6:	4149      	adcs	r1, r1
   d54f8:	bf28      	it	cs
   d54fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d54fe:	bd30      	pop	{r4, r5, pc}
   d5500:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5504:	bf3c      	itt	cc
   d5506:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d550a:	bd30      	popcc	{r4, r5, pc}
   d550c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5510:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5518:	f04f 0000 	mov.w	r0, #0
   d551c:	bd30      	pop	{r4, r5, pc}
   d551e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5522:	bf1a      	itte	ne
   d5524:	4619      	movne	r1, r3
   d5526:	4610      	movne	r0, r2
   d5528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d552c:	bf1c      	itt	ne
   d552e:	460b      	movne	r3, r1
   d5530:	4602      	movne	r2, r0
   d5532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5536:	bf06      	itte	eq
   d5538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d553c:	ea91 0f03 	teqeq	r1, r3
   d5540:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5544:	bd30      	pop	{r4, r5, pc}
   d5546:	bf00      	nop

000d5548 <__aeabi_ui2d>:
   d5548:	f090 0f00 	teq	r0, #0
   d554c:	bf04      	itt	eq
   d554e:	2100      	moveq	r1, #0
   d5550:	4770      	bxeq	lr
   d5552:	b530      	push	{r4, r5, lr}
   d5554:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5558:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d555c:	f04f 0500 	mov.w	r5, #0
   d5560:	f04f 0100 	mov.w	r1, #0
   d5564:	e750      	b.n	d5408 <__adddf3+0x138>
   d5566:	bf00      	nop

000d5568 <__aeabi_i2d>:
   d5568:	f090 0f00 	teq	r0, #0
   d556c:	bf04      	itt	eq
   d556e:	2100      	moveq	r1, #0
   d5570:	4770      	bxeq	lr
   d5572:	b530      	push	{r4, r5, lr}
   d5574:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5578:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d557c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5580:	bf48      	it	mi
   d5582:	4240      	negmi	r0, r0
   d5584:	f04f 0100 	mov.w	r1, #0
   d5588:	e73e      	b.n	d5408 <__adddf3+0x138>
   d558a:	bf00      	nop

000d558c <__aeabi_f2d>:
   d558c:	0042      	lsls	r2, r0, #1
   d558e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5592:	ea4f 0131 	mov.w	r1, r1, rrx
   d5596:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d559a:	bf1f      	itttt	ne
   d559c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d55a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d55a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d55a8:	4770      	bxne	lr
   d55aa:	f092 0f00 	teq	r2, #0
   d55ae:	bf14      	ite	ne
   d55b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d55b4:	4770      	bxeq	lr
   d55b6:	b530      	push	{r4, r5, lr}
   d55b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d55bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d55c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d55c4:	e720      	b.n	d5408 <__adddf3+0x138>
   d55c6:	bf00      	nop

000d55c8 <__aeabi_ul2d>:
   d55c8:	ea50 0201 	orrs.w	r2, r0, r1
   d55cc:	bf08      	it	eq
   d55ce:	4770      	bxeq	lr
   d55d0:	b530      	push	{r4, r5, lr}
   d55d2:	f04f 0500 	mov.w	r5, #0
   d55d6:	e00a      	b.n	d55ee <__aeabi_l2d+0x16>

000d55d8 <__aeabi_l2d>:
   d55d8:	ea50 0201 	orrs.w	r2, r0, r1
   d55dc:	bf08      	it	eq
   d55de:	4770      	bxeq	lr
   d55e0:	b530      	push	{r4, r5, lr}
   d55e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d55e6:	d502      	bpl.n	d55ee <__aeabi_l2d+0x16>
   d55e8:	4240      	negs	r0, r0
   d55ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d55ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d55f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d55f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d55fa:	f43f aedc 	beq.w	d53b6 <__adddf3+0xe6>
   d55fe:	f04f 0203 	mov.w	r2, #3
   d5602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5606:	bf18      	it	ne
   d5608:	3203      	addne	r2, #3
   d560a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d560e:	bf18      	it	ne
   d5610:	3203      	addne	r2, #3
   d5612:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5616:	f1c2 0320 	rsb	r3, r2, #32
   d561a:	fa00 fc03 	lsl.w	ip, r0, r3
   d561e:	fa20 f002 	lsr.w	r0, r0, r2
   d5622:	fa01 fe03 	lsl.w	lr, r1, r3
   d5626:	ea40 000e 	orr.w	r0, r0, lr
   d562a:	fa21 f102 	lsr.w	r1, r1, r2
   d562e:	4414      	add	r4, r2
   d5630:	e6c1      	b.n	d53b6 <__adddf3+0xe6>
   d5632:	bf00      	nop

000d5634 <__aeabi_dmul>:
   d5634:	b570      	push	{r4, r5, r6, lr}
   d5636:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d563a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d563e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5642:	bf1d      	ittte	ne
   d5644:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5648:	ea94 0f0c 	teqne	r4, ip
   d564c:	ea95 0f0c 	teqne	r5, ip
   d5650:	f000 f8de 	bleq	d5810 <__aeabi_dmul+0x1dc>
   d5654:	442c      	add	r4, r5
   d5656:	ea81 0603 	eor.w	r6, r1, r3
   d565a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d565e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5662:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5666:	bf18      	it	ne
   d5668:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d566c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5674:	d038      	beq.n	d56e8 <__aeabi_dmul+0xb4>
   d5676:	fba0 ce02 	umull	ip, lr, r0, r2
   d567a:	f04f 0500 	mov.w	r5, #0
   d567e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5682:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5686:	fbe0 e503 	umlal	lr, r5, r0, r3
   d568a:	f04f 0600 	mov.w	r6, #0
   d568e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5692:	f09c 0f00 	teq	ip, #0
   d5696:	bf18      	it	ne
   d5698:	f04e 0e01 	orrne.w	lr, lr, #1
   d569c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d56a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d56a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d56a8:	d204      	bcs.n	d56b4 <__aeabi_dmul+0x80>
   d56aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d56ae:	416d      	adcs	r5, r5
   d56b0:	eb46 0606 	adc.w	r6, r6, r6
   d56b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d56b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d56bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d56c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d56c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d56c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d56cc:	bf88      	it	hi
   d56ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d56d2:	d81e      	bhi.n	d5712 <__aeabi_dmul+0xde>
   d56d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d56d8:	bf08      	it	eq
   d56da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d56de:	f150 0000 	adcs.w	r0, r0, #0
   d56e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d56e6:	bd70      	pop	{r4, r5, r6, pc}
   d56e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d56ec:	ea46 0101 	orr.w	r1, r6, r1
   d56f0:	ea40 0002 	orr.w	r0, r0, r2
   d56f4:	ea81 0103 	eor.w	r1, r1, r3
   d56f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d56fc:	bfc2      	ittt	gt
   d56fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5702:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5706:	bd70      	popgt	{r4, r5, r6, pc}
   d5708:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d570c:	f04f 0e00 	mov.w	lr, #0
   d5710:	3c01      	subs	r4, #1
   d5712:	f300 80ab 	bgt.w	d586c <__aeabi_dmul+0x238>
   d5716:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d571a:	bfde      	ittt	le
   d571c:	2000      	movle	r0, #0
   d571e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5722:	bd70      	pople	{r4, r5, r6, pc}
   d5724:	f1c4 0400 	rsb	r4, r4, #0
   d5728:	3c20      	subs	r4, #32
   d572a:	da35      	bge.n	d5798 <__aeabi_dmul+0x164>
   d572c:	340c      	adds	r4, #12
   d572e:	dc1b      	bgt.n	d5768 <__aeabi_dmul+0x134>
   d5730:	f104 0414 	add.w	r4, r4, #20
   d5734:	f1c4 0520 	rsb	r5, r4, #32
   d5738:	fa00 f305 	lsl.w	r3, r0, r5
   d573c:	fa20 f004 	lsr.w	r0, r0, r4
   d5740:	fa01 f205 	lsl.w	r2, r1, r5
   d5744:	ea40 0002 	orr.w	r0, r0, r2
   d5748:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d574c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5754:	fa21 f604 	lsr.w	r6, r1, r4
   d5758:	eb42 0106 	adc.w	r1, r2, r6
   d575c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5760:	bf08      	it	eq
   d5762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5766:	bd70      	pop	{r4, r5, r6, pc}
   d5768:	f1c4 040c 	rsb	r4, r4, #12
   d576c:	f1c4 0520 	rsb	r5, r4, #32
   d5770:	fa00 f304 	lsl.w	r3, r0, r4
   d5774:	fa20 f005 	lsr.w	r0, r0, r5
   d5778:	fa01 f204 	lsl.w	r2, r1, r4
   d577c:	ea40 0002 	orr.w	r0, r0, r2
   d5780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5788:	f141 0100 	adc.w	r1, r1, #0
   d578c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5790:	bf08      	it	eq
   d5792:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5796:	bd70      	pop	{r4, r5, r6, pc}
   d5798:	f1c4 0520 	rsb	r5, r4, #32
   d579c:	fa00 f205 	lsl.w	r2, r0, r5
   d57a0:	ea4e 0e02 	orr.w	lr, lr, r2
   d57a4:	fa20 f304 	lsr.w	r3, r0, r4
   d57a8:	fa01 f205 	lsl.w	r2, r1, r5
   d57ac:	ea43 0302 	orr.w	r3, r3, r2
   d57b0:	fa21 f004 	lsr.w	r0, r1, r4
   d57b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d57b8:	fa21 f204 	lsr.w	r2, r1, r4
   d57bc:	ea20 0002 	bic.w	r0, r0, r2
   d57c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d57c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d57c8:	bf08      	it	eq
   d57ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d57ce:	bd70      	pop	{r4, r5, r6, pc}
   d57d0:	f094 0f00 	teq	r4, #0
   d57d4:	d10f      	bne.n	d57f6 <__aeabi_dmul+0x1c2>
   d57d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d57da:	0040      	lsls	r0, r0, #1
   d57dc:	eb41 0101 	adc.w	r1, r1, r1
   d57e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d57e4:	bf08      	it	eq
   d57e6:	3c01      	subeq	r4, #1
   d57e8:	d0f7      	beq.n	d57da <__aeabi_dmul+0x1a6>
   d57ea:	ea41 0106 	orr.w	r1, r1, r6
   d57ee:	f095 0f00 	teq	r5, #0
   d57f2:	bf18      	it	ne
   d57f4:	4770      	bxne	lr
   d57f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d57fa:	0052      	lsls	r2, r2, #1
   d57fc:	eb43 0303 	adc.w	r3, r3, r3
   d5800:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5804:	bf08      	it	eq
   d5806:	3d01      	subeq	r5, #1
   d5808:	d0f7      	beq.n	d57fa <__aeabi_dmul+0x1c6>
   d580a:	ea43 0306 	orr.w	r3, r3, r6
   d580e:	4770      	bx	lr
   d5810:	ea94 0f0c 	teq	r4, ip
   d5814:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5818:	bf18      	it	ne
   d581a:	ea95 0f0c 	teqne	r5, ip
   d581e:	d00c      	beq.n	d583a <__aeabi_dmul+0x206>
   d5820:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5824:	bf18      	it	ne
   d5826:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d582a:	d1d1      	bne.n	d57d0 <__aeabi_dmul+0x19c>
   d582c:	ea81 0103 	eor.w	r1, r1, r3
   d5830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5834:	f04f 0000 	mov.w	r0, #0
   d5838:	bd70      	pop	{r4, r5, r6, pc}
   d583a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d583e:	bf06      	itte	eq
   d5840:	4610      	moveq	r0, r2
   d5842:	4619      	moveq	r1, r3
   d5844:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5848:	d019      	beq.n	d587e <__aeabi_dmul+0x24a>
   d584a:	ea94 0f0c 	teq	r4, ip
   d584e:	d102      	bne.n	d5856 <__aeabi_dmul+0x222>
   d5850:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5854:	d113      	bne.n	d587e <__aeabi_dmul+0x24a>
   d5856:	ea95 0f0c 	teq	r5, ip
   d585a:	d105      	bne.n	d5868 <__aeabi_dmul+0x234>
   d585c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5860:	bf1c      	itt	ne
   d5862:	4610      	movne	r0, r2
   d5864:	4619      	movne	r1, r3
   d5866:	d10a      	bne.n	d587e <__aeabi_dmul+0x24a>
   d5868:	ea81 0103 	eor.w	r1, r1, r3
   d586c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5870:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5874:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5878:	f04f 0000 	mov.w	r0, #0
   d587c:	bd70      	pop	{r4, r5, r6, pc}
   d587e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5882:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5886:	bd70      	pop	{r4, r5, r6, pc}

000d5888 <__aeabi_ddiv>:
   d5888:	b570      	push	{r4, r5, r6, lr}
   d588a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d588e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5892:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5896:	bf1d      	ittte	ne
   d5898:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d589c:	ea94 0f0c 	teqne	r4, ip
   d58a0:	ea95 0f0c 	teqne	r5, ip
   d58a4:	f000 f8a7 	bleq	d59f6 <__aeabi_ddiv+0x16e>
   d58a8:	eba4 0405 	sub.w	r4, r4, r5
   d58ac:	ea81 0e03 	eor.w	lr, r1, r3
   d58b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d58b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d58b8:	f000 8088 	beq.w	d59cc <__aeabi_ddiv+0x144>
   d58bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d58c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d58c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d58c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d58cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d58d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d58d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d58d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d58dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d58e0:	429d      	cmp	r5, r3
   d58e2:	bf08      	it	eq
   d58e4:	4296      	cmpeq	r6, r2
   d58e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d58ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d58ee:	d202      	bcs.n	d58f6 <__aeabi_ddiv+0x6e>
   d58f0:	085b      	lsrs	r3, r3, #1
   d58f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d58f6:	1ab6      	subs	r6, r6, r2
   d58f8:	eb65 0503 	sbc.w	r5, r5, r3
   d58fc:	085b      	lsrs	r3, r3, #1
   d58fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d5902:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5906:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d590a:	ebb6 0e02 	subs.w	lr, r6, r2
   d590e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5912:	bf22      	ittt	cs
   d5914:	1ab6      	subcs	r6, r6, r2
   d5916:	4675      	movcs	r5, lr
   d5918:	ea40 000c 	orrcs.w	r0, r0, ip
   d591c:	085b      	lsrs	r3, r3, #1
   d591e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5922:	ebb6 0e02 	subs.w	lr, r6, r2
   d5926:	eb75 0e03 	sbcs.w	lr, r5, r3
   d592a:	bf22      	ittt	cs
   d592c:	1ab6      	subcs	r6, r6, r2
   d592e:	4675      	movcs	r5, lr
   d5930:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5934:	085b      	lsrs	r3, r3, #1
   d5936:	ea4f 0232 	mov.w	r2, r2, rrx
   d593a:	ebb6 0e02 	subs.w	lr, r6, r2
   d593e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5942:	bf22      	ittt	cs
   d5944:	1ab6      	subcs	r6, r6, r2
   d5946:	4675      	movcs	r5, lr
   d5948:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d594c:	085b      	lsrs	r3, r3, #1
   d594e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5952:	ebb6 0e02 	subs.w	lr, r6, r2
   d5956:	eb75 0e03 	sbcs.w	lr, r5, r3
   d595a:	bf22      	ittt	cs
   d595c:	1ab6      	subcs	r6, r6, r2
   d595e:	4675      	movcs	r5, lr
   d5960:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5964:	ea55 0e06 	orrs.w	lr, r5, r6
   d5968:	d018      	beq.n	d599c <__aeabi_ddiv+0x114>
   d596a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d596e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5972:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5976:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d597a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d597e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5982:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5986:	d1c0      	bne.n	d590a <__aeabi_ddiv+0x82>
   d5988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d598c:	d10b      	bne.n	d59a6 <__aeabi_ddiv+0x11e>
   d598e:	ea41 0100 	orr.w	r1, r1, r0
   d5992:	f04f 0000 	mov.w	r0, #0
   d5996:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d599a:	e7b6      	b.n	d590a <__aeabi_ddiv+0x82>
   d599c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d59a0:	bf04      	itt	eq
   d59a2:	4301      	orreq	r1, r0
   d59a4:	2000      	moveq	r0, #0
   d59a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d59aa:	bf88      	it	hi
   d59ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d59b0:	f63f aeaf 	bhi.w	d5712 <__aeabi_dmul+0xde>
   d59b4:	ebb5 0c03 	subs.w	ip, r5, r3
   d59b8:	bf04      	itt	eq
   d59ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   d59be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d59c2:	f150 0000 	adcs.w	r0, r0, #0
   d59c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d59ca:	bd70      	pop	{r4, r5, r6, pc}
   d59cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d59d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d59d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d59d8:	bfc2      	ittt	gt
   d59da:	ebd4 050c 	rsbsgt	r5, r4, ip
   d59de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d59e2:	bd70      	popgt	{r4, r5, r6, pc}
   d59e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d59e8:	f04f 0e00 	mov.w	lr, #0
   d59ec:	3c01      	subs	r4, #1
   d59ee:	e690      	b.n	d5712 <__aeabi_dmul+0xde>
   d59f0:	ea45 0e06 	orr.w	lr, r5, r6
   d59f4:	e68d      	b.n	d5712 <__aeabi_dmul+0xde>
   d59f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d59fa:	ea94 0f0c 	teq	r4, ip
   d59fe:	bf08      	it	eq
   d5a00:	ea95 0f0c 	teqeq	r5, ip
   d5a04:	f43f af3b 	beq.w	d587e <__aeabi_dmul+0x24a>
   d5a08:	ea94 0f0c 	teq	r4, ip
   d5a0c:	d10a      	bne.n	d5a24 <__aeabi_ddiv+0x19c>
   d5a0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a12:	f47f af34 	bne.w	d587e <__aeabi_dmul+0x24a>
   d5a16:	ea95 0f0c 	teq	r5, ip
   d5a1a:	f47f af25 	bne.w	d5868 <__aeabi_dmul+0x234>
   d5a1e:	4610      	mov	r0, r2
   d5a20:	4619      	mov	r1, r3
   d5a22:	e72c      	b.n	d587e <__aeabi_dmul+0x24a>
   d5a24:	ea95 0f0c 	teq	r5, ip
   d5a28:	d106      	bne.n	d5a38 <__aeabi_ddiv+0x1b0>
   d5a2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5a2e:	f43f aefd 	beq.w	d582c <__aeabi_dmul+0x1f8>
   d5a32:	4610      	mov	r0, r2
   d5a34:	4619      	mov	r1, r3
   d5a36:	e722      	b.n	d587e <__aeabi_dmul+0x24a>
   d5a38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5a3c:	bf18      	it	ne
   d5a3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5a42:	f47f aec5 	bne.w	d57d0 <__aeabi_dmul+0x19c>
   d5a46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5a4a:	f47f af0d 	bne.w	d5868 <__aeabi_dmul+0x234>
   d5a4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5a52:	f47f aeeb 	bne.w	d582c <__aeabi_dmul+0x1f8>
   d5a56:	e712      	b.n	d587e <__aeabi_dmul+0x24a>

000d5a58 <__aeabi_d2uiz>:
   d5a58:	004a      	lsls	r2, r1, #1
   d5a5a:	d211      	bcs.n	d5a80 <__aeabi_d2uiz+0x28>
   d5a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5a60:	d211      	bcs.n	d5a86 <__aeabi_d2uiz+0x2e>
   d5a62:	d50d      	bpl.n	d5a80 <__aeabi_d2uiz+0x28>
   d5a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5a6c:	d40e      	bmi.n	d5a8c <__aeabi_d2uiz+0x34>
   d5a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5a7a:	fa23 f002 	lsr.w	r0, r3, r2
   d5a7e:	4770      	bx	lr
   d5a80:	f04f 0000 	mov.w	r0, #0
   d5a84:	4770      	bx	lr
   d5a86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5a8a:	d102      	bne.n	d5a92 <__aeabi_d2uiz+0x3a>
   d5a8c:	f04f 30ff 	mov.w	r0, #4294967295
   d5a90:	4770      	bx	lr
   d5a92:	f04f 0000 	mov.w	r0, #0
   d5a96:	4770      	bx	lr

000d5a98 <__cxa_atexit>:
   d5a98:	b510      	push	{r4, lr}
   d5a9a:	4c05      	ldr	r4, [pc, #20]	; (d5ab0 <__cxa_atexit+0x18>)
   d5a9c:	4613      	mov	r3, r2
   d5a9e:	b12c      	cbz	r4, d5aac <__cxa_atexit+0x14>
   d5aa0:	460a      	mov	r2, r1
   d5aa2:	4601      	mov	r1, r0
   d5aa4:	2002      	movs	r0, #2
   d5aa6:	f3af 8000 	nop.w
   d5aaa:	bd10      	pop	{r4, pc}
   d5aac:	4620      	mov	r0, r4
   d5aae:	bd10      	pop	{r4, pc}
   d5ab0:	00000000 	.word	0x00000000

000d5ab4 <memcpy>:
   d5ab4:	b510      	push	{r4, lr}
   d5ab6:	1e43      	subs	r3, r0, #1
   d5ab8:	440a      	add	r2, r1
   d5aba:	4291      	cmp	r1, r2
   d5abc:	d004      	beq.n	d5ac8 <memcpy+0x14>
   d5abe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5ac6:	e7f8      	b.n	d5aba <memcpy+0x6>
   d5ac8:	bd10      	pop	{r4, pc}

000d5aca <memset>:
   d5aca:	4402      	add	r2, r0
   d5acc:	4603      	mov	r3, r0
   d5ace:	4293      	cmp	r3, r2
   d5ad0:	d002      	beq.n	d5ad8 <memset+0xe>
   d5ad2:	f803 1b01 	strb.w	r1, [r3], #1
   d5ad6:	e7fa      	b.n	d5ace <memset+0x4>
   d5ad8:	4770      	bx	lr
	...

000d5adc <srand>:
   d5adc:	b538      	push	{r3, r4, r5, lr}
   d5ade:	4b12      	ldr	r3, [pc, #72]	; (d5b28 <srand+0x4c>)
   d5ae0:	681c      	ldr	r4, [r3, #0]
   d5ae2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5ae4:	4605      	mov	r5, r0
   d5ae6:	b9d3      	cbnz	r3, d5b1e <srand+0x42>
   d5ae8:	2018      	movs	r0, #24
   d5aea:	f7fe fd2b 	bl	d4544 <malloc>
   d5aee:	f243 330e 	movw	r3, #13070	; 0x330e
   d5af2:	63a0      	str	r0, [r4, #56]	; 0x38
   d5af4:	8003      	strh	r3, [r0, #0]
   d5af6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5afa:	8043      	strh	r3, [r0, #2]
   d5afc:	f241 2334 	movw	r3, #4660	; 0x1234
   d5b00:	8083      	strh	r3, [r0, #4]
   d5b02:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5b06:	80c3      	strh	r3, [r0, #6]
   d5b08:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5b0c:	8103      	strh	r3, [r0, #8]
   d5b0e:	2305      	movs	r3, #5
   d5b10:	8143      	strh	r3, [r0, #10]
   d5b12:	230b      	movs	r3, #11
   d5b14:	8183      	strh	r3, [r0, #12]
   d5b16:	2201      	movs	r2, #1
   d5b18:	2300      	movs	r3, #0
   d5b1a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5b1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5b20:	2200      	movs	r2, #0
   d5b22:	611d      	str	r5, [r3, #16]
   d5b24:	615a      	str	r2, [r3, #20]
   d5b26:	bd38      	pop	{r3, r4, r5, pc}
   d5b28:	2003e3bc 	.word	0x2003e3bc

000d5b2c <strlen>:
   d5b2c:	4603      	mov	r3, r0
   d5b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b32:	2a00      	cmp	r2, #0
   d5b34:	d1fb      	bne.n	d5b2e <strlen+0x2>
   d5b36:	1a18      	subs	r0, r3, r0
   d5b38:	3801      	subs	r0, #1
   d5b3a:	4770      	bx	lr

000d5b3c <dynalib_user>:
   d5b3c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5b4c:	0000 0000                                   ....

000d5b50 <_ZTVN5spark13EthernetClassE>:
	...
   d5b58:	45c3 000d 45b9 000d 45af 000d 45a5 000d     .E...E...E...E..
   d5b68:	4599 000d 458d 000d 4581 000d 4579 000d     .E...E...E..yE..
   d5b78:	456f 000d 4565 000d 4e31 000d               oE..eE..1N..

000d5b84 <_ZTV8SPIClass>:
	...
   d5b8c:	45e1 000d 45e3 000d 0066 6e6c 6600 006e     .E...E..f.ln.fn.
   d5b9c:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
   d5bac:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d5bbc:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d5bcc:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
   d5bdc:	0064 6553 6972 6c61 5300 7265 6169 316c     d.Serial.Serial1
   d5bec:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
   d5bfc:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
   d5c0c:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   d5c1c:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   d5c2c:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   d5c3c:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   d5c4c:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
   d5c5c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d5c6c:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d5c7c:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d5c8c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d5c9c:	0065 0000                                   e...

000d5ca0 <_ZTV9IPAddress>:
	...
   d5ca8:	4889 000d 4879 000d 487b 000d               .H..yH..{H..

000d5cb4 <_ZTV9USBSerial>:
	...
   d5cbc:	4961 000d 49b1 000d 49bf 000d 4649 000d     aI...I...I..IF..
   d5ccc:	499d 000d 4963 000d 4979 000d 49ab 000d     .I..cI..yI...I..
   d5cdc:	498f 000d 495d 000d                         .I..]I..

000d5ce4 <_ZTV11USARTSerial>:
	...
   d5cec:	4a65 000d 4ab5 000d 4ac3 000d 4649 000d     eJ...J...J..IF..
   d5cfc:	4a79 000d 4a9b 000d 4a87 000d 4aaf 000d     yJ...J...J...J..
   d5d0c:	4a67 000d 4a6b 000d                         gJ..kJ..

000d5d14 <_ZTV7TwoWire>:
	...
   d5d1c:	4b69 000d 4bb3 000d 4b8b 000d 4b6b 000d     iK...K...K..kK..
   d5d2c:	4b93 000d 4b9b 000d 4ba3 000d 4bab 000d     .K...K...K...K..

000d5d3c <_ZTVN5spark9MeshClassE>:
	...
   d5d44:	4c4b 000d 4c41 000d 4c37 000d 4c2d 000d     KL..AL..7L..-L..
   d5d54:	4c21 000d 4c15 000d 4c09 000d 4c01 000d     !L...L...L...L..
   d5d64:	4bf7 000d 4bed 000d 4e31 000d               .K...K..1N..

000d5d70 <_ZTVN5spark9WiFiClassE>:
	...
   d5d78:	4dab 000d 4da1 000d 4d97 000d 4d4d 000d     .M...M...M..MM..
   d5d88:	4d8b 000d 4d7f 000d 4d73 000d 4d6b 000d     .M...M..sM..kM..
   d5d98:	4d61 000d 4d57 000d 4e31 000d               aM..WM..1N..

000d5da4 <_ZTVN5spark12NetworkClassE>:
	...
   d5dac:	4dc9 000d 4dd3 000d 4ddd 000d 4de7 000d     .M...M...M...M..
   d5dbc:	4df1 000d 4dfd 000d 4e09 000d 4e15 000d     .M...M...N...N..
   d5dcc:	4e1d 000d 4e27 000d 4e31 000d               .N..'N..1N..

000d5dd8 <__sf_fake_stdin>:
	...

000d5df8 <__sf_fake_stdout>:
	...

000d5e18 <__sf_fake_stderr>:
	...
   d5e38:	0043                                        C.

000d5e3a <link_const_variable_data_end>:
	...

000d5e3c <link_constructors_location>:
   d5e3c:	000d4129 	.word	0x000d4129
   d5e40:	000d4199 	.word	0x000d4199
   d5e44:	000d45cd 	.word	0x000d45cd
   d5e48:	000d4621 	.word	0x000d4621
   d5e4c:	000d4639 	.word	0x000d4639
   d5e50:	000d46f9 	.word	0x000d46f9
   d5e54:	000d4709 	.word	0x000d4709
   d5e58:	000d4789 	.word	0x000d4789
   d5e5c:	000d4d01 	.word	0x000d4d01
   d5e60:	000d4db5 	.word	0x000d4db5
   d5e64:	000d4efd 	.word	0x000d4efd
   d5e68:	000d4fa1 	.word	0x000d4fa1
   d5e6c:	000d5035 	.word	0x000d5035
   d5e70:	000d50b9 	.word	0x000d50b9
   d5e74:	000d517d 	.word	0x000d517d
   d5e78:	000d5241 	.word	0x000d5241

000d5e7c <link_constructors_end>:
   d5e7c:	00000000 	.word	0x00000000
